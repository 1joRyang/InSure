<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>COMPONENT</w2:type>
		<w2:buildDate />
		<w2:MSA />
		<xf:model>
			<w2:dataCollection baseNode="map">
				<!-- 검색 조건 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_search">
					<w2:keyInfo>
						<w2:key id="treatment_id" name="치료ID" dataType="text"></w2:key>
						<w2:key id="claim_no" name="청구번호" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 정산 상세정보 데이터맵 추가 -->
				<w2:dataMap baseNode="map" id="dma_settlementInfo">
					<w2:keyInfo>
						<w2:key id="treatment_id" name="치료ID" dataType="text"></w2:key>
						<w2:key id="claim_no" name="청구번호" dataType="text"></w2:key>
						<w2:key id="final_due" name="최종수납액" dataType="text"></w2:key>
						<w2:key id="hospital_prepaid" name="병원공제금" dataType="text"></w2:key>
						<w2:key id="deducation_amt" name="삭감항목금액" dataType="text"></w2:key>
						<w2:key id="refund_amt" name="환급금액" dataType="text"></w2:key>
						<w2:key id="patient_name" name="환자명" dataType="text" defaultValue="홍길동"></w2:key>
						<w2:key id="hospital_name" name="병원명" dataType="text" defaultValue="서울대학교병원"></w2:key>
						<w2:key id="treatment_date" name="진료일" dataType="text" defaultValue="2025-01-15"></w2:key>
						<w2:key id="emp_name" name="심사역" dataType="text" defaultValue="김심사"></w2:key>
						<w2:key id="status" name="상태" dataType="text" defaultValue="심사중"></w2:key>
						<w2:key id="generated_memo" name="생성된메모" dataType="text"></w2:key>
						<w2:key id="receipt_no" name="접수번호" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<w2:dataMap baseNode="map" id="dma_settlementTreatmentSearch">
					<w2:keyInfo>
						<w2:key id="SC_claim_no" name="검색_청구번호" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- API 응답 데이터맵 추가 -->
				<w2:dataMap baseNode="map" id="dma_apiResponse">
					<w2:keyInfo>
						<w2:key id="memo" name="메모" dataType="text"></w2:key>
						<w2:key id="receiptNo" name="접수번호" dataType="text"></w2:key>
						<w2:key id="receipt_no" name="접수번호" dataType="text"></w2:key>
						<w2:key id="status" name="상태" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 페이징 정보용 데이터맵 -->
				<w2:dataMap baseNode="map" id="dmp_settlementVo">
					<w2:keyInfo>
						<w2:key id="SC_treatment_id" name="검색_치료ID" dataType="text"></w2:key>
						<w2:key id="SC_claim_no" name="검색_청구번호" dataType="text"></w2:key>
						<w2:key id="pageIndex" name="페이지번호" dataType="text" defaultValue="1"></w2:key>
						<w2:key id="pageSize" name="페이지크기" dataType="text" defaultValue="10"></w2:key>
						<w2:key id="totalPageCount" name="전체페이지수" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<!-- CLAIM_RESULT -->
				<w2:dataMap baseNode="map" id="dma_claimResult">
					<w2:keyInfo>
						<w2:key id="claim_no" name="청구번호" dataType="text"></w2:key>
						<w2:key id="claim_memo" name="청구메모" dataType="text"></w2:key>
						<w2:key id="amount" name="금액" dataType="text"></w2:key>
						<w2:key id="date" name="날짜" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<!-- 제외 항목 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_excludedItems" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="exc_id" name="제외ID" dataType="text"></w2:column>
						<w2:column id="item_id" name="항목ID" dataType="text"></w2:column>
						<w2:column id="treatment_id" name="치료ID" dataType="text"></w2:column>
						<w2:column id="claim_no" name="청구번호" dataType="text"></w2:column>
						<w2:column id="exc_reason" name="제외사유" dataType="text"></w2:column>
						<w2:column id="exc_cost" name="제외금액" dataType="text"></w2:column>
						<w2:column id="exc_category" name="제외카테고리" dataType="text"></w2:column>
						<w2:column id="category_name" name="카테고리명" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 보험 상품 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_insuranceProducts" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="productCode" name="증권번호" dataType="text"></w2:column>
						<w2:column id="coverage" name="상품명" dataType="text"></w2:column>
						<w2:column id="contractor" name="계약자" dataType="text"></w2:column>
						<w2:column id="insuranceAmount" name="보험금액" dataType="text"></w2:column>
						<w2:column id="claimAmount" name="청구금액" dataType="text"></w2:column>
						<w2:column id="paymentAmount" name="지급금액" dataType="text"></w2:column>
						<w2:column id="status" name="상태" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 정산 목록 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_settlementVoList" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" name="final_due" id="final_due"></w2:column>
						<w2:column dataType="text" name="hospital_prepaid" id="hospital_prepaid"></w2:column>
						<w2:column dataType="text" name="deducation_amt" id="deducation_amt"></w2:column>
						<w2:column dataType="text" name="refund_amt" id="refund_amt"></w2:column>
						<w2:column dataType="text" name="treatment_id" id="treatment_id"></w2:column>
						<w2:column dataType="text" name="claim_no" id="claim_no"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList id="dlt_claimUserEmp">
					<w2:columnInfo>
						<w2:column dataType="text" name="claim_no" id="claim_no"></w2:column>
						<w2:column dataType="text" name="emp_name" id="emp_name"></w2:column>
						<w2:column dataType="text" name="user_name" id="user_name"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 전체 데이터를 담을 결과 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_result">
					<w2:keyInfo>
						<w2:key id="message" name="메시지" dataType="text"></w2:key>
						<w2:key id="resultCode" name="결과코드" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- FastAPI 요청용 데이터맵 추가 -->
				<w2:dataMap baseNode="map" id="dma_apiRequest">
					<w2:keyInfo>
						<w2:key id="settlement" name="정산데이터" dataType="object"></w2:key>
						<w2:key id="excluded_items" name="제외항목목록" dataType="array"></w2:key>
						<w2:key id="hospital_type" name="병원타입" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<w2:dataMap baseNode="map" id="dmp_claimVoDetail">
					<w2:keyInfo>
						<w2:key dataType="text" name="claim_no" id="claim_no"></w2:key>
						<w2:key dataType="text" name="claim_type" id="claim_type"></w2:key>
						<w2:key dataType="text" name="receipt_date" id="receipt_date"></w2:key>
						<w2:key dataType="text" name="status" id="status"></w2:key>
						<w2:key dataType="text" name="emp_no" id="emp_no"></w2:key>
						<w2:key dataType="text" name="ID" id="ID"></w2:key>
						<w2:key dataType="text" name="claim_content" id="claim_content"></w2:key>
						<w2:key dataType="text" name="disease_code" id="disease_code"></w2:key>
						<w2:key dataType="text" name="date_of_accident" id="date_of_accident"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<!-- 응답 데이터를 받을 DataMap 정의 -->
				<w2:dataMap id="dma_claimNoVo">
					<w2:keyInfo>
						<w2:key id="claim_no" dataType="text" />
					</w2:keyInfo>
				</w2:dataMap>

				<w2:dataMap id="dma_userEmpResult">
					<w2:keyInfo>
						<w2:key id="claim_no" dataType="text" />
						<w2:key id="user_name" dataType="text" />
						<w2:key id="emp_name" dataType="text" />
					</w2:keyInfo>
				</w2:dataMap>


				<w2:dataMap id="dma_claimVo">
					<w2:key id="claim_no" name="청구번호" dataType="text" />
				</w2:dataMap>
                				<!-- 정산집계 검색 조건 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_settlementSummarySearch">
					<w2:keyInfo>
						<w2:key id="SC_claim_no" name="SC_claim_no" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 정산집계 결과 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_settlementSummary">
					<w2:keyInfo>
						<w2:key id="claim_no" name="claim_no" dataType="text"></w2:key>
						<w2:key id="total_final_due" name="total_final_due" dataType="text"></w2:key>
						<w2:key id="total_refund_amt" name="total_refund_amt" dataType="text"></w2:key>
						<w2:key id="total_hp_prepaid" name="total_hp_prepaid" dataType="text"></w2:key>
						<w2:key id="total_deducation_amt" name="total_deducation_amt" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>


				<w2:dataList baseNode="list" repeatNode="map" id="dlt_settlementTreatmentList" saveRemovedData="true">
					<w2:columnInfo>
						<w2:column dataType="text" name="claim_no" id="claim_no"></w2:column>
						<w2:column defaultValue="" dataType="text" name="treatment_id" length="" id="treatment_id" encYN="" ignoreStatus="">
						</w2:column>
						<w2:column defaultValue="" dataType="text" name="final_due" length="" id="final_due" encYN="" ignoreStatus=""></w2:column>
						<w2:column defaultValue="" dataType="text" name="refund_amt" length="" id="refund_amt" encYN="" ignoreStatus=""></w2:column>
						<w2:column dataType="text" name="treatment_date" id="treatment_date"></w2:column>
						<w2:column dataType="text" name="hospital_prepaid" id="hospital_prepaid"></w2:column>
						<w2:column dataType="text" name="deducation_amt" id="deducation_amt"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
			</w2:dataCollection>
			<w2:workflowCollection />

			<!-- 정산목록 조회 -->
			<xf:submission id="sbm_selectSettlementVoList" ref='data:json,{"id":"dmp_settlementVo","key":"settlementVo"}'
				target='data:json,{"id":"dlt_settlementVoList","key":"elData.settlementVoList"}' action="/InsWebApp/SETTLEMENTList.pwkjson"
				method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous"
				processMsg="정산정보 리스트를 조회 중입니다." ev:submit="" ev:submitdone="scwin.sbm_settlementList_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>

			<!-- 정산정보 단건 조회 -->
			<xf:submission id="sbm_selectSettlement" ref='data:json,{"id":"dma_search","key":"settlementVo"}'
				target='data:json,{"id":"dma_settlementInfo","key":"elData"}' action="/InsWebApp/SETTLEMENTUpdView.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_selectSettlement_submitdone"
				ev:submiterror="scwin.sbm_selectSettlement_submiterror">
			</xf:submission>
			<!-- 제외항목 목록 조회 - EXCITEMListR 사용 -->
			<xf:submission id="sbm_selectExcludedItems" ref='data:json,{"id":"dma_search","key":"excItemVo"}'
				target='data:json,{"id":"dlt_excludedItems","key":"excitemVoList"}' action="/InsWebApp/EXCITEMListR.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_selectExcludedItems_submitdone"
				ev:submiterror="scwin.sbm_selectExcludedItems_submiterror">
			</xf:submission>

			<!-- 보험상품 목록 조회 - 실제 구현 필요 -->
			<xf:submission id="sbm_selectInsuranceProducts" ref='data:json,dma_search' target='data:json,dlt_insuranceProducts'
				action="/InsWebApp/SETTLEMENTInsuranceProductsList.pwkjson" method="post" mediatype="application/json" mode="asynchronous">
			</xf:submission>

			<!-- 심사메모 생성 - 전체 경로 지정 -->
			<xf:submission id="sbm_generateMemo" ref='data:json,dma_search' target='data:json,{"id":"dma_apiResponse","key":"elData"}'
				action="/InsWebApp/SETTLEMENTMemoGenerate.pwkjson" method="post" mediatype="application/json" mode="asynchronous"
				ev:submitdone="scwin.sbm_generateMemo_submitdone" ev:submiterror="scwin.sbm_generateMemo_submiterror">
			</xf:submission>

			<!-- 정산정보 업데이트 -->
			<xf:submission id="sbm_updateSettlement" ref='data:json,dma_settlementInfo' target='data:json,dma_result'
				action="/InsWebApp/SETTLEMENTUpd.pwkjson" method="post" mediatype="application/json" mode="asynchronous">
			</xf:submission>

			<xf:submission id="sbm_selectClaimVo" action="/InsWebApp/CLAIMUpdView.pwkjson" method="post" mediatype="application/json"
				ref="" target="" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
				ev:submitdone="scwin.sbm_selectClaimVo_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_selectClaimUserEmpInfo" ref='data:json,{"id":"dma_claimNoVo","key":"claimNoVo"}'
				target='data:json,{"id":"dma_userEmpResult","key":"elData"}' action="/InsWebApp/CLAIMFindUserEmpInfo.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_selectClaimUserEmpInfo_submitdone"
				ev:submiterror="scwin.sbm_selectClaimUserEmpInfo_submiterror">
			</xf:submission>
			<xf:submission id="sbm_saveClaimResult" ref='data:json,{"id":"dma_claimResult","key":"claimResultVo"}'
				target='data:json,{"id":"dma_result","key":"elData"}' action="/InsWebApp/CLAIMRESULTSave.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_saveClaimResult_submitdone"
				ev:submiterror="scwin.sbm_saveClaimResult_submiterror">
			</xf:submission>

			<!-- CLAIM_RESULT 업데이트 -->
			<xf:submission id="sbm_updateClaimResult" ref='data:json,{"id":"dma_claimResult","key":"claimResultVo"}'
				target='data:json,{"id":"dma_result","key":"elData"}' action="/InsWebApp/CLAIMRESULTUpd.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_updateClaimResult_submitdone"
				ev:submiterror="scwin.sbm_updateClaimResult_submiterror">
			</xf:submission>


			<xf:submission id="sbm_selectSettlementTreatment" action="/InsWebApp/SETTLEMENTTreatmentList.pwkjson" method="post"
				mediatype="application/json" ref='data:json,{"id":"dma_settlementTreatmentSearch","key":"settlementTreatmentVo"}'
				target='data:json,{"id":"dlt_settlementTreatmentList","key":"settlementTreatmentVoList"}' encoding="UTF-8" instance="" replace=""
				errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit="scwin.sbm_selectSettlementTreatment_submit"
				ev:submitdone="scwin.sbm_selectSettlementTreatment_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>
            			<!-- 정산집계 조회 submission -->
			<xf:submission id="sbm_selectSettlementSummary" 
				action="/InsWebApp/SETTLEMENTSummary.pwkjson" 
				method="post"
				mediatype="application/json" 
				ref='data:json,{"id":"dma_settlementSummarySearch","key":"settlementSummaryVo"}'
				target='data:json,{"id":"dma_settlementSummary","key":"elData"}' 
				encoding="UTF-8" 
				instance="" 
				replace="" 
				errorHandler="" 
				customHandler="" 
				mode="asynchronous" 
				processMsg="정산집계정보를 조회 중입니다..." 
				ev:submit=""
				ev:submitdone="scwin.sbm_selectSettlementSummary_submitdone" 
				ev:submiterror="" 
				abortTrigger="">
			</xf:submission>

		</xf:model>
		<w2:layoutInfo />
		<w2:publicInfo method="" />

		<style type="text/css"><![CDATA[
            .container {
             
            }
            
    <!--         .header_section {
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
             
            .main_content {
                display: flex;
                gap: 20px;
            }
             
             .left_panel {
                flex: 1;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
             
            .right_panel {
                width: 500px;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
             .info_row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
                padding: 8px 0;
                border-bottom: 1px solid #eee;
            } 
            
            .info_label {
                color: #666;
                font-weight: 500;
            }
            
            .info_value {
                color: #333;
                font-weight: bold;
            }
            
             .amount_display {
                text-align: center;
                padding: 30px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 8px;
                margin-bottom: 20px;
            }
             
             .amount_number {
                font-size: 36px;
                font-weight: bold;
                margin-bottom: 10px;
            } 
            
             .amount_desc {
                font-size: 14px;
                opacity: 0.9;
            }
             
             .memo_textarea {
                width: 100%;
                min-height: 200px;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 4px;
                resize: vertical;
                font-family: 'Noto Sans KR', sans-serif;
                font-size: 14px;
                line-height: 1.6;
            }
             -->
            .button_group {
                display: flex;
                gap: 10px;
                margin-top: 20px;
            }
            
            <!-- .btn_primary {
                flex: 1;
                padding: 12px 20px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
                font-weight: bold;
                cursor: pointer;
                transition: background-color 0.3s;
            }
             -->
            .btn_primary:hover {
                background-color: #45a049;
            }
            
            <!-- .btn_secondary {
                flex: 1;
                padding: 12px 20px;
                background-color: white;
                color: #333;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.3s;
            }
             -->
            .btn_secondary:hover {
                background-color: #f5f5f5;
                border-color: #999;
            }
            
            <!-- .btn_generate {
                background-color: #2196F3;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 4px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: background-color 0.3s; -->
            <!-- } -->
            
            .btn_generate:hover {
                background-color: #1976D2;
            }
            
            <!-- .excluded_items_section {
                margin-top: 20px;
                padding: 15px;
                background-color: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 4px;
            } -->
            
            <!-- .section_title {
                font-size: 16px;
                font-weight: bold;
                margin-bottom: 15px;
                color: #333;
            }
             -->
            <!-- .status_badge {
                display: inline-block;
                padding: 4px 12px;
                border-radius: 12px;
                font-size: 12px;
                font-weight: bold;
            }
             -->
            .status_pending {
                background-color: #FFF3E0;
                color: #F57C00;
            }
            
            .status_completed {
                background-color: #E8F5E9;
                color: #2E7D32;
            }
            
            .loading_overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 9999;
            }
            
            .loading_spinner {
                width: 50px;
                height: 50px;
                border: 5px solid #f3f3f3;
                border-top: 5px solid #3498db;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        ]]></style>

		<script lazy="false" type="text/javascript"><![CDATA[
// 로딩 표시 함수
scwin.showLoading = function (show) {
    try {
        if (typeof $p.showLoading === 'function') {
            $p.showLoading(show);
        } else if (typeof WebSquare.uiplugin.popup.showLoading === 'function') {
            if (show) {
                WebSquare.uiplugin.popup.showLoading();
            } else {
                WebSquare.uiplugin.popup.hideLoading();
            }
        } else if (typeof gcm !== 'undefined' && gcm.win && typeof gcm.win.showLoading === 'function') {
            gcm.win.showLoading(show);
        } else {
            console.log("Loading indicator:", show);
        }
    } catch (e) {
        console.log("Loading indicator error:", e);
    }
};

scwin.onpageload = function () {
    console.log("=== 페이지 로드 시작 ===");

    // 로컬스토리지에 초기값 설정
    localStorage.setItem("treatment_id", "1");
    localStorage.setItem("claim_no", "a52d86a3-5629-11f0-b4f3-bc2411231130");

    // 로컬스토리지에서 가져오기
    var treatmentId = localStorage.getItem("treatment_id");
    var claimNo = localStorage.getItem("claim_no");
    dma_claimVo.set("claimVo.claim_no", claimNo);

    // 검색 조건에 설정
    dma_search.set("treatment_id", treatmentId);
    dma_search.set("claim_no", claimNo);
    // 페이징 정보 설정
    dmp_settlementVo.set("SC_treatment_id", treatmentId);
    dmp_settlementVo.set("SC_claim_no", claimNo);

    // 데이터 조회
    scwin.loadClaimUserEmpInfo();
    scwin.searchSettlementData();
    scwin.sbm_selectSettlementTreatment();
    scwin.sbm_selectSettlementSummary();
};

scwin.sbm_selectSettlementTreatment = function () {
    var claimNo = dma_search.get("claim_no");
    if (!claimNo) {
        console.error("청구번호가 없습니다.")
        alert("청구번호가 설정되지 않았습니다.")
        return;
    }
    dma_settlementTreatmentSearch.set("SC_claim_no", claimNo);

    try {
        $p.executeSubmission("sbm_selectSettlementTreatment");
    } catch (error) {
        console.error("Submission 실행 오류:", error);
        alert("정산치료 조회 중 오류가 발생했습니다: " + error.message);
    }
}
// 정산 데이터 조회 메인 함수
scwin.searchSettlementData = function () {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");


    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호가 필요합니다.");
        return;
    }

    scwin.showLoading(true);

    // 1. 먼저 정산 목록을 조회
    $p.executeSubmission("sbm_selectSettlementVoList");
};

// 정산 목록 조회 완료 콜백
scwin.sbm_settlementList_submitdone = function (e) {

    // error 수신시
    var elData = e.responseJSON ? e.responseJSON.elData : null;
    var elHeader = e.responseJSON ? e.responseJSON.elHeader : null;

    if (!elHeader || elHeader.resSuc === false) {
        scwin.showLoading(false);
        console.error("정산 목록 조회 실패:", elHeader);
        alert("정산 목록 조회에 실패했습니다.");
        return;
    }

    // 목록에서 해당 데이터 찾기
    var rowCount = dlt_settlementVoList.getRowCount();

    if (rowCount > 0) {
        var treatmentId = dma_search.get("treatment_id");
        var claimNo = dma_search.get("claim_no");
        var foundIndex = -1;

        // 목록에서 매칭되는 데이터 찾기
        for (var i = 0; i < rowCount; i++) {
            var rowTreatmentId = dlt_settlementVoList.getCellData(i, "treatment_id");
            var rowClaimNo = dlt_settlementVoList.getCellData(i, "claim_no");

            if (rowTreatmentId === treatmentId && rowClaimNo === claimNo) {
                foundIndex = i;
                break;
            }
        }

        if (foundIndex >= 0) {
            // 찾은 데이터를 상세 정보에 설정
            var rowData = dlt_settlementVoList.getRowJSON(foundIndex);

            // dma_settlementInfo에 데이터 설정
            dma_settlementInfo.setJSON(rowData);

            // dma_search가 제대로 설정되어 있는지 확인
            if (!dma_search.get("treatment_id") || !dma_search.get("claim_no")) {
                dma_search.set("treatment_id", rowData.treatment_id);
                dma_search.set("claim_no", rowData.claim_no);
            }

            // 추가 필드 설정 (테스트용 더미 데이터)
            if (!dma_settlementInfo.get("patient_name")) {
                dma_settlementInfo.set("patient_name", "홍길동");
            }
            if (!dma_settlementInfo.get("hospital_name")) {
                dma_settlementInfo.set("hospital_name", "서울대학교병원");
            }
            if (!dma_settlementInfo.get("treatment_date")) {
                dma_settlementInfo.set("treatment_date", "2025-01-15");
            }
            if (!dma_settlementInfo.get("reviewer")) {
                dma_settlementInfo.set("reviewer", "김심사");
            }
            if (!dma_settlementInfo.get("status")) {
                dma_settlementInfo.set("status", "심사중");
            }

            // 단건 조회로 상세 정보 가져오기
            scwin.sbm_selectSettlement();

        } else {
            scwin.showLoading(false);
            alert("해당 치료ID와 청구번호에 맞는 정산 데이터를 찾을 수 없습니다.");

            // 첫 번째 데이터로 진행할지 확인
            if (confirm("목록의 첫 번째 데이터로 진행하시겠습니까?")) {
                var firstRow = dlt_settlementVoList.getRowJSON(0);
                dma_search.set("treatment_id", firstRow.treatment_id);
                dma_search.set("claim_no", firstRow.claim_no);
                dma_settlementInfo.setJSON(firstRow);

                scwin.sbm_selectSettlement();
            }
        }
    } else {
        scwin.showLoading(false);
        alert("조회된 정산 데이터가 없습니다.");
    }
};

// 정산 상세 조회
scwin.sbm_selectSettlement = function (e) {

    // 파라미터 확인
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");


    if (!treatmentId || !claimNo) {
        console.error("정산 상세 조회 실패 - 필수 파라미터 누락");
        alert("치료ID와 청구번호가 필요합니다.");
        scwin.showLoading(false);
        return;
    }

    $p.executeSubmission("sbm_selectSettlement");
};
// 정산 상세 조회 완료 콜백
scwin.sbm_selectSettlement_submitdone = function (e) {

    // 금액 표시 업데이트

    // 제외항목 조회
    scwin.searchExcludedItems();
};

// 제외 항목 조회
scwin.searchExcludedItems = function (e) {
    console.log(e);
    console.log(dlt_excludedItems.getTotalRow()); // 실제 행 수 확인
    console.log(dlt_excludedItems.getAllJSON()); // 전체 데이터 확인
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");


    if (!treatmentId || !claimNo) {
        console.log("제외항목 조회 스킵 - 파라미터 부족");
        scwin.searchInsuranceProducts();
        return;
    }

    // EXCITEMListR 호출
    $p.executeSubmission("sbm_selectExcludedItems");
};

// // 제외항목 조회 성공 콜백
scwin.sbm_selectExcludedItems_submitdone = function (e) {
    console.log("=== 제외항목 조회 완료 ===");
    console.log("제외항목 응답:", e);

    // 응답 데이터 확인
    var responseData = e.responseJSON;
    console.log("응답 데이터 전체:", responseData);

    if (!responseData) {
        console.error("응답 데이터 없음");
        scwin.setTestExcludedItems();
        scwin.calculateTotalExcludedAmount();
        scwin.searchInsuranceProducts();
        return;
    }

    // excItemVoList 확인 (EXCITEMListR의 응답 구조)
    if (responseData.excItemVoList && Array.isArray(responseData.excItemVoList)) {
        console.log("excItemVoList로 수신, 개수:", responseData.excItemVoList.length);

        // 카테고리명 추가
        responseData.excItemVoList.forEach(function (item) {
            if (!item.category_name) {
                // 숫자로 된 exc_category 값 처리
                switch (item.exc_category) {
                    case "1":
                    case "CAT01":
                        item.category_name = "치과, 한방치료 비급여 의료비";
                        break;
                    case "2":
                    case "CAT02":
                        item.category_name = "국민건강보험공단으로부터 환급이 가능한 금액";
                        break;
                    case "3":
                    case "CAT03":
                        item.category_name = "건강검진, 예방접종, 인공유산";
                        break;
                    case "4":
                    case "CAT04":
                        item.category_name = "영양제, 종합비타민제, 호르몬 투여, 보신용 투약 등";
                        break;
                    case "5":
                        item.category_name = "단순피로, 권태, 여드름, 주근깨, 점, 사마귀 등";
                        break;
                    case "6":
                        item.category_name = "보조기, 보장구, 안경, 렌즈 등 진료 재료구입비";
                        break;
                    case "7":
                        item.category_name = "외모개선 목적의 치료로 인하여 발생한 의료비";
                        break;
                    case "8":
                        item.category_name = "제비용(TV시청료, 전화료, 제증명료 등)";
                        break;
                    case "9":
                        item.category_name = "산재보험에서 보상받는 의료비";
                        break;
                    case "10":
                        item.category_name = "인간면역바이러스(HIV)감염으로 인한 치료비";
                        break;
                    case "11":
                        item.category_name = "해외 소재 의료기관에서 발생한 의료비";
                        break;
                    default:
                        item.category_name = "..";
                }
            }
        });

        // DataList에 설정
        dlt_excludedItems.setJSON(responseData.excItemVoList);
        console.log("제외항목 데이터 설정 완료");

    } else if (Array.isArray(responseData)) {
        // 직접 배열로 오는 경우
        console.log("배열로 직접 수신, 개수:", responseData.length);

        responseData.forEach(function (item) {
            if (!item.category_name) {
                switch (item.exc_category) {
                    case "1":
                    case "CAT01":
                        item.category_name = "비급여";
                        break;
                    case "2":
                    case "CAT02":
                        item.category_name = "한도초과";
                        break;
                    case "3":
                    case "CAT03":
                        item.category_name = "건강검진";
                        break;
                    case "4":
                    case "CAT04":
                        item.category_name = "중복청구";
                        break;
                    case "5":
                        item.category_name = "사전승인누락";
                        break;
                    case "6":
                        item.category_name = "서류미비";
                        break;
                    case "7":
                        item.category_name = "보장제외";
                        break;
                    case "8":
                        item.category_name = "기타";
                        break;
                    default:
                        item.category_name = "기타";
                }
            }
        });

        dlt_excludedItems.setJSON(responseData);
    } else {
        console.log("예상된 데이터 구조가 아님, 테스트 데이터 사용");
        scwin.setTestExcludedItems();
    }

    // 제외항목 총액 계산
    scwin.calculateTotalExcludedAmount();

    // 보험상품 조회
    scwin.searchInsuranceProducts();
};

// 제외항목 조회 실패 콜백
scwin.sbm_selectExcludedItems_submiterror = function (e) {
    console.error("=== 제외항목 조회 오류 ===");
    console.error("오류 객체:", e);
    console.error("상태 코드:", e.status);
    console.error("응답 텍스트:", e.responseText);

    // 오류가 발생해도 테스트 데이터로 진행
    scwin.setTestExcludedItems();

    // 제외항목 총액 계산
    scwin.calculateTotalExcludedAmount();

    // 보험상품 조회 계속
    scwin.searchInsuranceProducts();
};




// 숫자 포맷팅
scwin.formatNumber = function (num) {
    if (!num) return "0";
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

// 제외항목 총액 계산
scwin.calculateTotalExcludedAmount = function () {
    var totalExcluded = 0;
    var rowCount = dlt_excludedItems.getRowCount();

    console.log("제외항목 총액 계산 - 항목 수:", rowCount);

    for (var i = 0; i < rowCount; i++) {
        var excCost = dlt_excludedItems.getCellData(i, "exc_cost");
        var cost = parseInt(excCost) || 0;
        totalExcluded += cost;

        console.log("제외항목[" + i + "] 금액:", cost);
    }

    console.log("총 제외 금액:", totalExcluded);


    // 정산 정보에도 반영 (옵션)
    var deductionAmt = dma_settlementInfo.get("deducation_amt");
    if (!deductionAmt || deductionAmt === "0") {
        dma_settlementInfo.set("deducation_amt", totalExcluded.toString());
    }
};

// 제외 항목 그리드 더블클릭 이벤트
scwin.grd_excludedItems_oncelldblclick = function (row, col) {
    var itemId = dlt_excludedItems.getCellData(row, "item_id");
    var reason = dlt_excludedItems.getCellData(row, "exc_reason");
    var amount = dlt_excludedItems.getCellData(row, "exc_cost");
    var category = dlt_excludedItems.getCellData(row, "category_name");
    var excCategory = dlt_excludedItems.getCellData(row, "exc_category");

    var detailMsg = "제외항목 상세정보\n" +
        "================\n" +
        "항목ID: " + itemId + "\n" +
        "카테고리: " + category + " (" + excCategory + ")\n" +
        "제외사유: " + reason + "\n" +
        "제외금액: " + scwin.formatNumber(amount) + "원";

    alert(detailMsg);
};

// FastAPI 심사메모 생성
scwin.generateMemoFromAPI = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("심사메모 생성 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }
    
    // 로딩 표시
    scwin.showLoading(true);
    
    // submission 실행
    $p.executeSubmission("sbm_generateMemo");
}; 

// FastAPI 심사메모 생성 - 올바른 데이터 구조로 전송

// FastAPI 심사메모 생성 - WebSquare 표준 방식 사용

// FastAPI 심사메모 생성 - submission 사용
scwin.generateMemoFromAPI = function () {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");


    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }

    // FastAPI가 원하는 데이터 구조 생성
    var requestData = scwin.prepareFastAPIRequestData();

    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }

    console.log("FastAPI 요청 데이터:", JSON.stringify(requestData, null, 2));

    // dma_apiRequest에 데이터 설정
    dma_apiRequest.set("settlement", requestData.dma_apiRequest.settlement);
    dma_apiRequest.set("excluded_items", requestData.dma_apiRequest.excluded_items);
    dma_apiRequest.set("hospital_type", requestData.dma_apiRequest.hospital_type);

    // 로딩 표시
    scwin.showLoading(true);

    // submission 실행
    $c.sbm.execute("sbm_generateMemo");
};
// 1. 누락된 함수 추가
scwin.searchInsuranceProducts = function () {

    // 임시로 테스트 데이터 설정
    var testInsuranceData = [
        {
            productCode: "INS-2025-001",
            coverage: "실손의료보험",
            contractor: "홍길동",
            insuranceAmount: "500000",
            claimAmount: "248924",
            paymentAmount: "248924",
            status: "지급승인"
        }
    ];

    dlt_insuranceProducts.setJSON(testInsuranceData);
    console.log("보험상품 데이터 설정 완료");

    // 로딩 종료
    scwin.showLoading(false);
};

// FastAPI 심사메모 생성 - claim_no 기준으로 수정
scwin.generateMemoFromAPI = function () {
    var claimNo = dma_search.get("claim_no");

    if (!claimNo) {
        alert("청구번호를 확인해주세요.");
        return;
    }

    // claim_no 기준 요청 데이터 준비
    var requestData = scwin.prepareFastAPIRequestData();

    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }

    console.log("FastAPI 요청 데이터:", JSON.stringify(requestData, null, 2));

    // 로딩 표시
    scwin.showLoading(true);

    // 직접 FastAPI 호출 (claim_no 기준 엔드포인트 사용)
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8000/api/v1/generate-memo-by-claim", true);
    xhr.setRequestHeader("Content-Type", "application/json");

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            scwin.showLoading(false);

            if (xhr.status === 200) {
                try {
                    var responseData = JSON.parse(xhr.responseText);
                    console.log("API 응답:", responseData);

                    // claim_no 기준 응답 처리
                    if (responseData && responseData.status === "success" && responseData.results && responseData.results.length > 0) {
                        // 첫 번째 claim_no의 메모 사용 (단일 claim_no인 경우)
                        var result = responseData.results[0];
                        
                        // 메모 설정
                        txt_examMemo.setValue(result.memo);
                        dma_settlementInfo.set("generated_memo", result.memo);

                        // 요약 정보도 설정
                        if (result.summary) {
                            dma_settlementInfo.set("memo_summary", JSON.stringify(result.summary));
                            
                            // 집계 정보 업데이트
                            if (result.summary.settlement_summary) {
                                dma_settlementInfo.set("total_final_due", result.summary.settlement_summary.total_final_due);
                                dma_settlementInfo.set("total_refund_amt", result.summary.settlement_summary.total_refund_amt);
                                dma_settlementInfo.set("treatment_count", result.summary.settlement_summary.treatment_count);
                            }
                        }

                        alert("심사 메모가 성공적으로 생성되었습니다.\n처리된 진료 건수: " + result.treatment_count + "건");
                        
                    } else {
                        alert("메모 생성에 실패했습니다. 응답 데이터가 없습니다.");
                    }
                } catch (e) {
                    console.error("응답 파싱 오류:", e);
                    alert("응답 처리 중 오류가 발생했습니다.");
                }
            } else if (xhr.status === 0) {
                console.error("네트워크 오류 - FastAPI 서버가 실행 중인지 확인하세요.");
                alert("FastAPI 서버에 연결할 수 없습니다.\n서버가 실행 중인지 확인해주세요.");
            } else {
                console.error("API 호출 실패:", xhr.status);
                alert("API 호출에 실패했습니다. (상태: " + xhr.status + ")");
            }
        }
    };

    xhr.onerror = function () {
        scwin.showLoading(false);
        console.error("네트워크 오류");
        alert("네트워크 오류가 발생했습니다. FastAPI 서버를 확인해주세요.");
    };

    // claim_no 기준 데이터 전송
    xhr.send(JSON.stringify(requestData));
};
// 또는 직접 FastAPI 호출 (프록시 우회)
scwin.generateMemoFromAPI_Direct = function () {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");


    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }

    // FastAPI가 원하는 데이터 구조 생성
    var requestData = scwin.prepareFastAPIRequestData();

    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }

    // 로딩 표시
    scwin.showLoading(true);

    // 직접 FastAPI 호출
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8000/api/v1/generate-memo", true);
    xhr.setRequestHeader("Content-Type", "application/json");

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            scwin.showLoading(false);

            if (xhr.status === 200) {
                try {
                    var responseData = JSON.parse(xhr.responseText);

                    if (responseData && responseData.memo) {
                        // 메모 설정
                        txt_examMemo.setValue(responseData.memo);
                        dma_settlementInfo.set("generated_memo", responseData.memo);

                        // 접수번호 설정
                        if (responseData.receiptNo || responseData.receipt_no) {
                            var receiptNo = responseData.receiptNo || responseData.receipt_no;
                            dma_settlementInfo.set("receipt_no", receiptNo);
                            spn_receiptNo.setValue("접수번호: " + receiptNo);
                        }

                        alert("심사 메모가 성공적으로 생성되었습니다.");
                    } else {
                        alert("메모 생성에 실패했습니다. 응답 데이터가 없습니다.");
                    }
                } catch (e) {
                    console.error("응답 파싱 오류:", e);
                    alert("응답 처리 중 오류가 발생했습니다.");
                }
            } else {
                console.error("API 호출 실패:", xhr.status);
                alert("API 호출에 실패했습니다. (상태: " + xhr.status + ")");
            }
        }
    };

    xhr.send(JSON.stringify(requestData.dma_apiRequest));
};
// FastAPI 요청 데이터 준비 함수
scwin.prepareFastAPIRequestData = function () {
    try {
        var claimNo = dma_search.get("claim_no");
        
        // 1. Settlements 데이터 준비 (claim_no 기준으로 여러 건 가능)
        var settlements = [];
        
        // settlementTreatmentList에서 데이터 가져오기 (claim_no별 정산 목록)
        var settlementRowCount = dlt_settlementTreatmentList ? dlt_settlementTreatmentList.getRowCount() : 0;
        
        if (settlementRowCount > 0) {
            // settlementTreatmentList에서 데이터 추출
            for (var i = 0; i < settlementRowCount; i++) {
                var settlement = {
                    settlement_id: parseInt(dlt_settlementTreatmentList.getCellData(i, "settlement_id") || (i + 1)),
                    final_due: parseInt(dlt_settlementTreatmentList.getCellData(i, "final_due") || "0"),
                    hospital_prepaid: parseInt(dlt_settlementTreatmentList.getCellData(i, "hospital_prepaid") || "0"),
                    deducation_amt: parseInt(dlt_settlementTreatmentList.getCellData(i, "deducation_amt") || "0"),
                    refund_amt: parseInt(dlt_settlementTreatmentList.getCellData(i, "refund_amt") || "0"),
                    treatment_id: parseInt(dlt_settlementTreatmentList.getCellData(i, "treatment_id")),
                    claim_no: claimNo
                };
                settlements.push(settlement);
            }
        } else {
            // 기존 방식 fallback (단일 데이터)
            var settlement = {
                settlement_id: parseInt(dma_settlementInfo.get("settlement_id") || "1"),
                final_due: parseInt(dma_settlementInfo.get("final_due") || "0"),
                hospital_prepaid: parseInt(dma_settlementInfo.get("hospital_prepaid") || "0"),
                deducation_amt: parseInt(dma_settlementInfo.get("deducation_amt") || "0"),
                refund_amt: parseInt(dma_settlementInfo.get("refund_amt") || "0"),
                treatment_id: parseInt(dma_search.get("treatment_id") || "1"),
                claim_no: claimNo
            };
            settlements.push(settlement);
        }

        // 2. Treatments 데이터 준비 (claim_no의 모든 진료 데이터)
        var treatments = [];
        
        // 진료 데이터가 별도 DataList에 있다면 거기서 가져오기
        // 없으면 settlementTreatmentList나 기본 정보로 생성
        var treatmentRowCount = 0;
        var treatmentSource = null;
        
        // 여러 가능한 진료 데이터 소스 확인
        if (typeof dlt_treatmentList !== 'undefined' && dlt_treatmentList.getRowCount() > 0) {
            treatmentSource = dlt_treatmentList;
            treatmentRowCount = dlt_treatmentList.getRowCount();
        } else if (typeof dlt_settlementTreatmentList !== 'undefined' && dlt_settlementTreatmentList.getRowCount() > 0) {
            treatmentSource = dlt_settlementTreatmentList;
            treatmentRowCount = dlt_settlementTreatmentList.getRowCount();
        }
        
        if (treatmentRowCount > 0 && treatmentSource) {
            for (var j = 0; j < treatmentRowCount; j++) {
                var treatment = {
                    treatment_id: parseInt(treatmentSource.getCellData(j, "treatment_id")),
                    claim_no: claimNo,
                    department: treatmentSource.getCellData(j, "department") || "일반",
                    treatment_date: treatmentSource.getCellData(j, "treatment_date") || new Date().toISOString().split('T')[0],
                    patient_type: treatmentSource.getCellData(j, "patient_type") || "일반",
                    hospital_name: treatmentSource.getCellData(j, "hospital_name") || dma_settlementInfo.get("hospital_name") || "병원",
                    hospital_grade: treatmentSource.getCellData(j, "hospital_grade") || dma_settlementInfo.get("hospital_grade") || "병원급"
                };
                treatments.push(treatment);
            }
        } else {
            // 기본 진료 데이터 생성 (settlements와 매칭)
            for (var k = 0; k < settlements.length; k++) {
                var treatment = {
                    treatment_id: settlements[k].treatment_id,
                    claim_no: claimNo,
                    department: dma_settlementInfo.get("department") || "일반",
                    treatment_date: dma_settlementInfo.get("treatment_date") || new Date().toISOString().split('T')[0],
                    patient_type: dma_settlementInfo.get("patient_type") || "일반",
                    hospital_name: dma_settlementInfo.get("hospital_name") || "병원",
                    hospital_grade: dma_settlementInfo.get("hospital_grade") || "병원급"
                };
                treatments.push(treatment);
            }
        }

        // 3. Excluded Items 데이터 준비 (claim_no의 모든 제외 항목)
        var excludedItems = [];
        var excludedRowCount = dlt_excludedItems.getRowCount();

        for (var l = 0; l < excludedRowCount; l++) {
            var item = {
                exc_id: parseInt(dlt_excludedItems.getCellData(l, "exc_id") || (l + 1)),
                item_id: parseInt(dlt_excludedItems.getCellData(l, "item_id") || "0"),
                treatment_id: parseInt(dlt_excludedItems.getCellData(l, "treatment_id") || treatments[0]?.treatment_id || 1),
                claim_no: claimNo,
                exc_reason: dlt_excludedItems.getCellData(l, "exc_reason") || "",
                exc_cost: parseInt(dlt_excludedItems.getCellData(l, "exc_cost") || "0"),
                exc_category: dlt_excludedItems.getCellData(l, "exc_category") || ""
            };
            excludedItems.push(item);
        }

        // 4. 최종 요청 데이터 구성
        var requestData = {
            settlements: settlements,
            treatments: treatments,
            excluded_items: excludedItems
        };

        console.log("준비된 요청 데이터 통계:");
        console.log("- claim_no: " + claimNo);
        console.log("- settlements: " + settlements.length + "건");
        console.log("- treatments: " + treatments.length + "건");
        console.log("- excluded_items: " + excludedItems.length + "건");

        return requestData;

    } catch (error) {
        console.error("요청 데이터 준비 오류:", error);
        return null;
    }
};

// 기존 방식과의 호환성을 위한 함수 (기존 엔드포인트 사용)
scwin.generateMemoFromAPI_Legacy = function () {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");

    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }

    // 기존 방식의 데이터 구조 생성
    var requestData = scwin.prepareLegacyFastAPIRequestData();

    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }

    console.log("Legacy FastAPI 요청 데이터:", JSON.stringify(requestData, null, 2));

    // 로딩 표시
    scwin.showLoading(true);

    // 기존 엔드포인트 호출
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8000/api/v1/generate-memo", true);
    xhr.setRequestHeader("Content-Type", "application/json");

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            scwin.showLoading(false);

            if (xhr.status === 200) {
                try {
                    var responseData = JSON.parse(xhr.responseText);
                    console.log("Legacy API 응답:", responseData);

                    if (responseData && responseData.memo) {
                        // 메모 설정
                        txt_examMemo.setValue(responseData.memo);
                        dma_settlementInfo.set("generated_memo", responseData.memo);

                        // 접수번호 설정
                        if (responseData.receiptNo || responseData.receipt_no) {
                            var receiptNo = responseData.receiptNo || responseData.receipt_no;
                            dma_settlementInfo.set("receipt_no", receiptNo);
                            if (typeof spn_receiptNo !== 'undefined') {
                                spn_receiptNo.setValue("접수번호: " + receiptNo);
                            }
                        }

                        alert("심사 메모가 성공적으로 생성되었습니다.");
                    } else {
                        alert("메모 생성에 실패했습니다. 응답 데이터가 없습니다.");
                    }
                } catch (e) {
                    console.error("응답 파싱 오류:", e);
                    alert("응답 처리 중 오류가 발생했습니다.");
                }
            } else {
                console.error("API 호출 실패:", xhr.status);
                alert("API 호출에 실패했습니다. (상태: " + xhr.status + ")");
            }
        }
    };

    xhr.onerror = function () {
        scwin.showLoading(false);
        console.error("네트워크 오류");
        alert("네트워크 오류가 발생했습니다. FastAPI 서버를 확인해주세요.");
    };

    xhr.send(JSON.stringify(requestData.dma_apiRequest));
};

// 기존 방식 호환용 데이터 준비 함수
scwin.prepareLegacyFastAPIRequestData = function () {
    try {
        // 1. Settlement 데이터 준비 (단일)
        var settlementData = {
            settlement_id: parseInt(dma_settlementInfo.get("settlement_id") || "1"),
            final_due: parseInt(dma_settlementInfo.get("final_due") || "0"),
            hospital_prepaid: parseInt(dma_settlementInfo.get("hospital_prepaid") || "0"),
            deducation_amt: parseInt(dma_settlementInfo.get("deducation_amt") || "0"),
            refund_amt: parseInt(dma_settlementInfo.get("refund_amt") || "0"),
            treatment_id: parseInt(dma_search.get("treatment_id")),
            claim_no: dma_search.get("claim_no")
        };

        // 2. Excluded Items 데이터 준비
        var excludedItems = [];
        var rowCount = dlt_excludedItems.getRowCount();

        for (var i = 0; i < rowCount; i++) {
            var item = {
                exc_id: parseInt(dlt_excludedItems.getCellData(i, "exc_id") || (i + 1)),
                item_id: parseInt(dlt_excludedItems.getCellData(i, "item_id") || "0"),
                treatment_id: parseInt(dma_search.get("treatment_id")),
                claim_no: dma_search.get("claim_no"),
                exc_reason: dlt_excludedItems.getCellData(i, "exc_reason") || "",
                exc_cost: parseInt(dlt_excludedItems.getCellData(i, "exc_cost") || "0"),
                exc_category: dlt_excludedItems.getCellData(i, "exc_category") || ""
            };
            excludedItems.push(item);
        }

        // 3. 병원 타입 결정
        var hospitalType = "병원급";
        var hospitalName = dma_settlementInfo.get("hospital_name");
        if (hospitalName) {
            if (hospitalName.includes("의원") || hospitalName.includes("클리닉")) {
                hospitalType = "의원급";
            } else if (hospitalName.includes("종합병원") || hospitalName.includes("대학병원")) {
                hospitalType = "종합전문";
            }
        }

        // 4. 기존 형식으로 요청 데이터 구성
        var requestData = {
            dma_apiRequest: {
                settlement: settlementData,
                excluded_items: excludedItems,
                hospital_type: hospitalType
            }
        };

        return requestData;

    } catch (error) {
        console.error("Legacy 요청 데이터 준비 오류:", error);
        return null;
    }
};
scwin.generateMemoWithOptions = function () {
    var hasMultipleTreatments = false;
    
    // 여러 진료 건이 있는지 확인
    if (typeof dlt_settlementTreatmentList !== 'undefined') {
        hasMultipleTreatments = dlt_settlementTreatmentList.getRowCount() > 1;
    }
    
    if (hasMultipleTreatments) {
        // 다중 진료 건이 있으면 새로운 방식 사용
        console.log("다중 진료 건 감지, claim_no 기준 API 사용");
        scwin.generateMemoFromAPI();
    } else {
        // 단일 진료 건이면 기존 방식 사용
        console.log("단일 진료 건, 기존 API 사용");
        scwin.generateMemoFromAPI_Legacy();
    }
};

// 디버그용 데이터 확인 함수
scwin.checkAPIRequestData = function () {
    var requestData = scwin.prepareFastAPIRequestData();
    
    if (requestData) {
        console.log("=== API 요청 데이터 검증 ===");
        console.log("전체 구조:", requestData);
        
        // settlements 검증
        console.log("\n[Settlements 검증]");
        requestData.settlements.forEach(function (settlement, index) {
            console.log("Settlement " + (index + 1) + ":", settlement);
            if (!settlement.treatment_id || !settlement.claim_no) {
                console.warn("Settlement " + (index + 1) + " 필수 필드 누락!");
            }
        });
        
        // treatments 검증
        console.log("\n[Treatments 검증]");
        requestData.treatments.forEach(function (treatment, index) {
            console.log("Treatment " + (index + 1) + ":", treatment);
            if (!treatment.treatment_id || !treatment.claim_no) {
                console.warn("Treatment " + (index + 1) + " 필수 필드 누락!");
            }
        });
        
        // excluded_items 검증
        console.log("\n[Excluded Items 검증]");
        requestData.excluded_items.forEach(function (item, index) {
            console.log("Excluded Item " + (index + 1) + ":", item);
            if (!item.treatment_id || !item.claim_no) {
                console.warn("Excluded Item " + (index + 1) + " 필수 필드 누락!");
            }
        });
        
        alert("데이터 검증 완료. 콘솔을 확인하세요.");
    } else {
        alert("데이터 준비에 실패했습니다.");
    }
};
// 심사메모 생성 성공 콜백
scwin.sbm_generateMemo_submitdone = function (e) {
    scwin.showLoading(false);


    // 응답 데이터 확인
    var responseData = null;

    // 1. dma_apiResponse에서 직접 가져오기
    if (dma_apiResponse) {
        responseData = dma_apiResponse.getJSON();
    }

    // 2. e.responseJSON 확인
    if (!responseData && e.responseJSON) {
        responseData = e.responseJSON;
    }

    if (responseData && responseData.memo) {
        // 메모 설정
        txt_examMemo.setValue(responseData.memo);
        dma_settlementInfo.set("generated_memo", responseData.memo);

        // 접수번호가 있으면 설정
        if (responseData.receiptNo || responseData.receipt_no) {
            var receiptNo = responseData.receiptNo || responseData.receipt_no;
            dma_settlementInfo.set("receipt_no", receiptNo);
            spn_receiptNo.setValue("접수번호: " + receiptNo);
        }

        alert("심사 메모가 성공적으로 생성되었습니다.");

    } else {
        alert("심사 메모 생성에 실패했습니다.\n응답 데이터를 확인해주세요.");
        console.error("메모 데이터 없음. 응답:", responseData);
    }
};

// 심사메모 생성 실패 콜백
scwin.sbm_generateMemo_submiterror = function (e) {
    scwin.showLoading(false);

    console.error("=== 메모 생성 오류 ===");
    console.error("오류 객체:", e);

    var errorMsg = "심사 메모 생성 중 오류가 발생했습니다.\n";

    if (e.status === 404) {
        errorMsg += "요청 URL을 찾을 수 없습니다.";
    } else if (e.status === 500) {
        errorMsg += "서버 내부 오류가 발생했습니다.";
    } else if (e.responseText) {
        try {
            var errorData = JSON.parse(e.responseText);
            errorMsg += errorData.message || e.responseText;
        } catch (ex) {
            errorMsg += e.responseText;
        }
    }

    alert(errorMsg);
};

// 최종 심사 완료
scwin.btn_complete_onclick = function () {
    var memo = txt_examMemo.getValue();

    if (!memo || memo.trim() === "") {
        alert("심사 메모를 먼저 생성해주세요.");
        return;
    }

    if (confirm("최종 심사를 완료하시겠습니까?")) {
        // 상태 업데이트
        dma_settlementInfo.set("status", "심사완료");

        // 서버에 업데이트
        scwin.showLoading(true);
        $p.executeSubmission("sbm_updateSettlement", {
            success: function (e) {
                scwin.showLoading(false);

                // 보험 상품 상태 업데이트
                var rowCount = dlt_insuranceProducts.getRowCount();
                for (var i = 0; i < rowCount; i++) {
                    dlt_insuranceProducts.setCellData(i, "status", "지급완료");
                }

                // 상태 배지 업데이트
                spn_status.removeClass("status_pending");
                spn_status.addClass("status_completed");
                spn_status.setValue("심사완료");

                alert("심사가 완료되었습니다.");
            },
            error: function (e) {
                scwin.showLoading(false);
                dma_settlementInfo.set("status", "심사중");
                alert("심사 완료 처리 중 오류가 발생했습니다.");
            }
        });
    }
};




// 4. 정산 상세 조회 오류 처리 콜백 추가
scwin.sbm_selectSettlement_submiterror = function (e) {

    scwin.showLoading(false);

    // 목록에서 가져온 데이터가 이미 있으므로 계속 진행
    if (dma_settlementInfo.get("final_due")) {


        // 제외항목 조회
        scwin.searchExcludedItems();
    } else {
        alert("정산 상세 정보 조회에 실패했습니다.");
    }
};



scwin.loadClaimUserEmpInfo = function (e) {

    var claimNo = localStorage.getItem("claim_no");

    if (!claimNo) {
        alert("저장된 청구번호가 없습니다.");
        return;
    }
    dma_claimNoVo.set("claim_no", claimNo);

    $p.executeSubmission("sbm_selectClaimUserEmpInfo");
};

// CLAIM_RESULT 데이터 준비 함수
scwin.prepareClaimResultData = function () {
    var claimNo = dma_search.get("claim_no");
    var memo = txt_examMemo.getValue() || "";
    var refundAmount = dma_settlementInfo.get("refund_amt") || "0";

    // 현재 날짜 (YYYY-MM-DD 형식)
    var currentDate = new Date();
    var formattedDate = currentDate.getFullYear() + '-' +
        String(currentDate.getMonth() + 1).padStart(2, '0') + '-' +
        String(currentDate.getDate()).padStart(2, '0');

    // CLAIM_RESULT 데이터 설정
    dma_claimResult.set("claim_no", claimNo);
    dma_claimResult.set("claim_memo", memo.trim());
    dma_claimResult.set("amount", refundAmount);
    dma_claimResult.set("date", formattedDate);


    return {
        claim_no: claimNo,
        memo: memo.trim(),
        amount: refundAmount,
        date: formattedDate
    };
};

// 최종 심사 완료 (수정된 함수)
scwin.btn_complete_onclick = function () {
    var memo = txt_examMemo.getValue();

    if (!memo || memo.trim() === "") {
        alert("심사 메모를 먼저 생성해주세요.");
        return;
    }

    var claimNo = dma_search.get("claim_no");
    if (!claimNo) {
        alert("청구번호가 없습니다.");
        return;
    }

    // CLAIM_RESULT 데이터 준비
    var resultData = scwin.prepareClaimResultData();

    if (confirm(
        "최종 심사를 완료하시겠습니까?\n\n" +
        "- 청구번호: " + resultData.claim_no +
        "\n- 지급금액: " + scwin.formatNumber(resultData.amount) + "원" +
        "\n- 처리일자: " + resultData.date
    )) {
        scwin.showLoading(true);

        // 1단계: settlement 상태 변경
        dma_settlementInfo.set("status", "심사완료");

        // 2단계: CLAIM_RESULT 테이블에 저장
        $p.executeSubmission("sbm_saveClaimResult");
    }
};

// CLAIM_RESULT 저장 성공 콜백
scwin.sbm_saveClaimResult_submitdone = function (e) {

    var responseData = e.responseJSON;
    var elHeader = responseData ? responseData.elHeader : null;

    if (elHeader && elHeader.resSuc !== false) {
        // 저장 성공
        console.log("CLAIM_RESULT 저장 성공");

        // 정산 정보도 업데이트 (심사완료 상태인 경우)
        var currentStatus = dma_settlementInfo.get("status");
        if (currentStatus === "심사완료") {
            scwin.updateSettlementStatus();
        } else {
            scwin.showLoading(false);
            alert("메모가 성공적으로 저장되었습니다.");
        }

    } else {
        // 저장 실패
        scwin.showLoading(false);
        var errorMsg = elHeader && elHeader.resMsg ? elHeader.resMsg : "저장에 실패했습니다.";
        console.error("CLAIM_RESULT 저장 실패:", errorMsg);
        alert("CLAIM_RESULT 저장 실패: " + errorMsg);

        // 심사완료 상태였다면 되돌리기
        if (dma_settlementInfo.get("status") === "심사완료") {
            dma_settlementInfo.set("status", "심사중");
        }
    }
};

// CLAIM_RESULT 업데이트 성공 콜백 (기존 데이터가 있을 때 사용)
scwin.sbm_updateClaimResult_submitdone = function (e) {

    scwin.showLoading(false);

    var responseData = e.responseJSON;
    var elHeader = responseData ? responseData.elHeader : null;

    if (elHeader && elHeader.resSuc !== false) {
        alert("CLAIM_RESULT가 성공적으로 업데이트되었습니다.");
    } else {
        var errorMsg = elHeader && elHeader.resMsg ? elHeader.resMsg : "업데이트에 실패했습니다.";
        alert("CLAIM_RESULT 업데이트 실패: " + errorMsg);
    }
};
// CLAIM_RESULT 저장 실패 콜백
scwin.sbm_saveClaimResult_submiterror = function (e) {
    scwin.showLoading(false);

    console.error("=== CLAIM_RESULT 저장 오류 ===");
    console.error("오류 객체:", e);
    console.error("상태 코드:", e.status);
    console.error("응답 텍스트:", e.responseText);

    var errorMsg = "CLAIM_RESULT 저장 중 오류가 발생했습니다.";

    if (e.status === 404) {
        errorMsg += "\n요청 URL을 찾을 수 없습니다.";
    } else if (e.status === 500) {
        errorMsg += "\n서버 내부 오류가 발생했습니다.";
    } else if (e.responseText) {
        try {
            var errorData = JSON.parse(e.responseText);
            errorMsg += "\n" + (errorData.message || e.responseText);
        } catch (ex) {
            errorMsg += "\n" + e.responseText;
        }
    }

    alert(errorMsg);

    // 심사완료 상태였다면 되돌리기
    if (dma_settlementInfo.get("status") === "심사완료") {
        dma_settlementInfo.set("status", "심사중");
    }
};
// CLAIM_RESULT 업데이트 실패 콜백
scwin.sbm_updateClaimResult_submiterror = function (e) {
    scwin.showLoading(false);
    console.error("=== CLAIM_RESULT 업데이트 오류 ===", e);
    alert("CLAIM_RESULT 업데이트 중 오류가 발생했습니다.");
};

// 정산 정보 상태 업데이트 함수
scwin.updateSettlementStatus = function () {
    console.log("정산 정보 상태 업데이트 시작");

    // 정산 정보 업데이트 submission 실행
    $p.executeSubmission("sbm_updateSettlement", {
        success: function (e) {
            scwin.showLoading(false);

            console.log("정산 정보 업데이트 성공");

            // 보험 상품 상태 업데이트
            var rowCount = dlt_insuranceProducts.getRowCount();
            for (var i = 0; i < rowCount; i++) {
                dlt_insuranceProducts.setCellData(i, "status", "지급완료");
            }

            // 상태 배지 업데이트
            spn_status.removeClass("status_pending");
            spn_status.addClass("status_completed");
            spn_status.setValue("심사완료");

            alert("심사가 완료되었습니다.\nCLAIM_RESULT 테이블에 결과가 저장되었습니다.");
        },
        error: function (e) {
            scwin.showLoading(false);
            console.error("정산 정보 업데이트 실패:", e);

            // 상태는 되돌리지만 CLAIM_RESULT는 이미 저장됨
            dma_settlementInfo.set("status", "심사중");
            alert("CLAIM_RESULT는 저장되었지만, 정산 정보 업데이트에 실패했습니다.");
        }
    });
};



// 1. 수정된 콜백 함수 - 서버 응답에 따른 데이터 처리
scwin.sbm_selectSettlementTreatment_submitdone = function (e) {
    console.log("=== settlementTreatment 조회 완료 ===");
    console.log("전체 응답:", e);
    
    // 응답 데이터 구조 확인
    var responseData = e.responseJSON;
    console.log("responseJSON:", responseData);
    
    // elHeader 확인
    var elHeader = responseData ? responseData.elHeader : null;
    console.log("elHeader:", elHeader);
    
    if (!elHeader || elHeader.resSuc === false) {
        console.error("settlementTreatment 조회 실패:", elHeader);
        alert("정산치료 조회에 실패했습니다: " + (elHeader ? elHeader.resMsg : "응답 없음"));
        return;
    }
    
    // elData에서 데이터 추출
    var treatmentData = null;
    
    if (responseData.elData) {
        // 1. List<SettlementTreatmentVo> 직접 반환하는 경우
        if (Array.isArray(responseData.elData)) {
            treatmentData = responseData.elData;
            console.log("elData가 직접 배열:", treatmentData.length);
        }
        // 2. 래핑된 구조인 경우 (가능한 키들 확인)
        else if (responseData.elData.settlementTreatmentVoList) {
            treatmentData = responseData.elData.settlementTreatmentVoList;
            console.log("settlementTreatmentVoList:", treatmentData.length);
        }
        else if (responseData.elData.list) {
            treatmentData = responseData.elData.list;
            console.log("list 키로 수신:", treatmentData.length);
        }
        else {
            // 구조를 확인하기 위해 모든 키 출력
            console.log("elData 구조 확인:");
            Object.keys(responseData.elData).forEach(function(key) {
                console.log("- " + key + ":", responseData.elData[key]);
            });
            
            // 첫 번째 키의 값이 배열인지 확인
            var firstKey = Object.keys(responseData.elData)[0];
            if (firstKey && Array.isArray(responseData.elData[firstKey])) {
                treatmentData = responseData.elData[firstKey];
                console.log("첫 번째 키(" + firstKey + ")로 데이터 추출:", treatmentData.length);
            }
        }
    }
    
    // 데이터 설정
    if (treatmentData && Array.isArray(treatmentData) && treatmentData.length > 0) {
        console.log("치료 데이터 샘플:", treatmentData[0]);
        
        // DataList에 설정
        dlt_settlementTreatmentList.setJSON(treatmentData);
        console.log("DataList 설정 완료, 행 수:", dlt_settlementTreatmentList.getRowCount());
        
        // 첫 번째 행의 데이터를 settlementInfo에도 반영 (선택사항)
        var firstRow = treatmentData[0];
        if (firstRow.hospital_prepaid) {
            dma_settlementInfo.set("hospital_prepaid", firstRow.hospital_prepaid);
        }
        if (firstRow.deducation_amt) {
            dma_settlementInfo.set("deducation_amt", firstRow.deducation_amt);
        }
        if (firstRow.final_due) {
            dma_settlementInfo.set("final_due", firstRow.final_due);
        }
        if (firstRow.refund_amt) {
            dma_settlementInfo.set("refund_amt", firstRow.refund_amt);
        }
        
        console.log("settlementInfo 업데이트 완료");
        console.log("- hospital_prepaid:", dma_settlementInfo.get("hospital_prepaid"));
        console.log("- deducation_amt:", dma_settlementInfo.get("deducation_amt"));
        
        // 금액 표시 업데이트
        
    } else {
        console.log("치료 데이터가 없거나 빈 배열");
    }
};


// 1. 수정된 정산집계 조회 함수
scwin.sbm_selectSettlementSummary = function(){
    var claimNo = dma_search.get("claim_no");
    if (!claimNo) {
        console.error("청구번호가 없습니다.")
        alert("청구번호가 설정되지 않았습니다.")
        return;
    }
    
    // ✅ 파라미터명 확인 (SC_claim_no vs claim_no)
    dma_settlementSummarySearch.set("SC_claim_no", claimNo);
    
    console.log("요청 데이터:", dma_settlementSummarySearch.getJSON());
    
    try {
        $p.executeSubmission("sbm_selectSettlementSummary");
     
    } catch (error) {
        console.error("Submission 실행 오류:", error);
        alert("정산집계 조회 중 오류가 발생했습니다: " + error.message);
    }
};

// 2. 개선된 성공 콜백 함수
scwin.sbm_selectSettlementSummary_submitdone = function (e) {
    console.log("sbm_selectSettlementSummary 실행됨");
    console.log("=== 정산집계 조회 완료 ===");
    console.log("전체 응답:", e);
    
    // 응답 데이터 구조 확인
    var responseData = e.responseJSON;
    console.log("responseJSON:", responseData);
    
    // elHeader 확인
    var elHeader = responseData ? responseData.elHeader : null;
    console.log("elHeader:", elHeader);
    
    if (!elHeader || elHeader.resSuc === false) {
        console.error("정산집계 조회 실패:", elHeader);
        alert("정산집계 조회에 실패했습니다: " + (elHeader ? elHeader.resMsg : "응답 없음"));
        
        // 실패 시 테스트 데이터 설정
        scwin.setTestSettlementSummary();
        return;
    }
    
    // elData 확인 및 처리
    if (responseData.elData) {
        console.log("정산집계 데이터:", responseData.elData);
        
        // dma_settlementSummary에 데이터가 자동으로 설정되었는지 확인
        var summaryData = dma_settlementSummary.getJSON();
        console.log("설정된 정산집계 데이터:", summaryData);
        
        // 데이터 유효성 검증
        if (summaryData.total_final_due && summaryData.total_final_due !== "") {
            console.log("정산집계 데이터 정상 수신");
            
            // 금액 표시 업데이트
        } else {
            console.log("정산집계 데이터가 비어있음, 개별 치료 데이터로 계산");
            scwin.calculateSummaryFromTreatmentList();
        }
    } else {
        console.log("elData가 없음, 테스트 데이터 사용");
        scwin.setTestSettlementSummary();
    }
};

// 3. 오류 처리 콜백 함수 추가
scwin.sbm_selectSettlementSummary_submiterror = function (e) {
    console.error("=== 정산집계 조회 오류 ===");
    console.error("오류 객체:", e);
    console.error("상태 코드:", e.status);
    console.error("응답 텍스트:", e.responseText);
    
    var errorMsg = "정산집계 조회 중 오류가 발생했습니다.";
    if (e.status === 404) {
        errorMsg += "\n요청 URL을 찾을 수 없습니다.";
    } else if (e.status === 500) {
        errorMsg += "\n서버 내부 오류가 발생했습니다.";
    }
    
    console.log(errorMsg);
    
    // 오류 시 테스트 데이터 사용
    scwin.setTestSettlementSummary();
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload">
		<w2:wframe style="z-index: 20;top: 0;width: 100%;" id="" src="/InsWebApp/ui/cmmn/hearder.xml"></w2:wframe>
		<xf:group class="container" id="" style="padding:20px; background-color:#f5f5f5; top:100px; ">
			<!-- 헤더 영역 -->
			<xf:group class="header_section" id=""
				style="background-color: white;                padding: 20px;                border-radius: 8px;                margin-bottom: 20px;                box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
				<xf:group id="" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:15px;">
					<w2:textbox id="" label="보험금 정산 심사" style="font-size:24px;font-weight:bold;"></w2:textbox>
					<xf:group id="" style="display:flex;align-items:center;gap:10px;">
						<w2:span class="status_badge status_pending" id="spn_status" ref="data:dma_settlementInfo.status"
							style="display: inline-block;                padding: 4px 12px;                border-radius: 12px;                font-size: 12px;                font-weight: bold;"></w2:span>
						<xf:trigger type="button" id="btn_refresh" ev:onclick="scwin.refreshData" style="padding:4px 12px;font-size:12px;">
							<xf:label>새로고침</xf:label>
						</xf:trigger>
						<!-- 테스트 버튼 그룹 (개발 환경에서만 표시) -->
					</xf:group>
				</xf:group>

				<xf:group id="" style="display:flex;gap:30px;flex-wrap:wrap;">
					<xf:group id="">
						<w2:span id="" label="청구번호: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_userEmpResult.claim_no" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="환자명: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_userEmpResult.user_name" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="심사역: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_userEmpResult.emp_name" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="spn_receiptNo" style="color:#2196F3;font-weight:bold;"></w2:span>
					</xf:group>
				</xf:group>
			</xf:group>

			<!-- 메인 컨텐츠 영역 -->
			<xf:group class="main_content" id="" style="display: flex; gap: 20px;">
				<!-- 왼쪽 패널 -->
				<xf:group class="left_panel" id=""
					style="flex: 1; background-color: white; padding: 20px; border-radius: 8px;  box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
					<!-- 금액 표시 영역 -->
					<xf:group class="amount_display" id=""
						style="text-align: center; padding: 30px; background: #d9e3f0; color: black; border-radius: 8px; margin-bottom: 20px;">
						<w2:textbox class="amount_number" id="txt_amountNumber" label=""
							style="font-size: 36px; font-weight: bold; margin-bottom: 10px;" ref="data:dma_settlementSummary.total_refund_amt" displayFormat="#,### 원">
						</w2:textbox>
						<w2:textbox class="amount_desc" id="txt_amountDesc" label="" style="font-size: 14px; opacity: 0.9;">
						</w2:textbox>
					</xf:group>
					<w2:textbox class="section_title" id="" label="보험 상품별 지급 내역" style="margin-top:20px;"></w2:textbox>
					<w2:gridView id="grd_insuranceProducts" style="height:180px;" dataList="data:dlt_insuranceProducts" autoFit="allColumn"
						readOnly="true" class="gvw">
						<w2:caption style="" id="caption2" value="보험 상품 목록"></w2:caption>
						<w2:header style="" id="header2">
							<w2:row style="" id="row3">
								<w2:column width="120" inputType="text" id="column4" value="증권번호" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" id="column5" value="상품명" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="column6" value="계약자" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="column7" value="청구금액" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="column8" value="지급금액" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="column9" value="상태" displayMode="label"></w2:column>
							</w2:row>
						</w2:header>
						<w2:gBody style="" id="gBody2">
							<w2:row style="" id="row4">
								<w2:column width="120" inputType="text" id="productCode" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" id="coverage" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="contractor" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="claimAmount" displayMode="label" dataType="number" displayFormat="#,###">
								</w2:column>
								<w2:column width="100" inputType="text" id="paymentAmount" displayMode="label" dataType="number" displayFormat="#,###">
								</w2:column>
								<w2:column width="80" inputType="text" id="status" displayMode="label"></w2:column>
							</w2:row>
						</w2:gBody>
					</w2:gridView>
					<xf:group id=""
						style="background-color: #ffffff; border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
						<!-- 제목 -->
						<xf:group id="" style="margin-bottom: 20px;">
							<w2:span id="" label="지급 금액 산출 내역" style="font-size: 16px; font-weight: bold; color: #333;"></w2:span>
						</xf:group>

						<!-- 계산 내역 -->
						<xf:group id="" style="background-color: #f8f9fa; padding: 15px; border-radius: 4px;">
							<!-- 총 청구금액 -->
							<xf:group class="info_row" id=""
								style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0;">
								<w2:span class="info_label" id="" label="최종 수납액" style="color: #666; font-size: 14px;"></w2:span>
								<w2:span class="info_value" id="" style="color: #333; font-weight: 600; font-size: 14px;"
									ref="data:dma_settlementSummary.total_final_due" displayFormat="#,### 원">
								</w2:span>
							</xf:group>

							<!-- 공제금액 (자기부담금) -->
							<xf:group class="info_row" id=""
								style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0;">
								<w2:span class="info_label" id="" label="병원 공제금" style="color: #666; font-size: 14px;"></w2:span>
								<w2:span class="info_value" id="" style="color: #333; font-weight: 600; font-size: 14px;"
									ref="data:dma_settlementSummary.total_hp_prepaid" displayFormat="#,### 원">
									<w2:span label="-"></w2:span>
								</w2:span>
							</xf:group>

							<!-- 본인부담금 (10%) -->
							<xf:group class="info_row" id=""
								style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0;">
								<w2:span class="info_label" id="" label="삭감 항목 금액" style="color: #666; font-size: 14px;"></w2:span>
								<w2:span class="info_value" id="" style="color: #333; font-weight: 600; font-size: 14px;"
									ref="data:dma_settlementSummary.total_deducation_amt" displayFormat="#,### 원">
									<w2:span label="-"></w2:span>
								</w2:span>
							</xf:group>

							<!-- 구분선 (계산선) -->
							<xf:group id="" style="margin: 15px 0; padding: 0;">
								<hr style="border: none; border-top: 2px solid #333; margin: 0;" />
							</xf:group>

							<!-- 최종 지급금액 -->
							<xf:group class="info_row" id=""
								style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0;">
								<w2:span class="info_label" id="" label="최종 지급금액" style="color: #333; font-weight: bold; font-size: 15px;">
								</w2:span>
								<w2:span class="info_value" id="" style="color: #007bff; font-weight: bold; font-size: 16px;"
									ref="data:dma_settlementSummary.total_refund_amt" displayFormat="#,### 원">
								</w2:span>
							</xf:group>
						</xf:group>
						<!-- 보험 상품 그리드 -->

					</xf:group>
					<xf:group adaptiveThreshold="" class="gvwbox" id="" meta_snippetCategory="06_그리드" meta_snippetKeyComponent="true"
						meta_snippetName="6_01 그리드" style="">
						<w2:gridView autoFit="allColumn" checkReadOnlyOnPasteEnable="" class="gvw" dataList="data:dlt_settlementTreatmentList"
							focusMode="row" id="" scrollByColumn="false" scrollByColumnAdaptive="false" style="height: 153px;">
							<w2:caption id="caption2" style="" value="this is a grid caption."></w2:caption>
							<w2:header id="header2" style="">
								<w2:row id="row3" style="">
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="column9" value="진료날짜" blockSelect="false"
										displayMode="label">
									</w2:column>
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="column11" value="최종 수납액" blockSelect="false"
										displayMode="label">
									</w2:column>
									<w2:column width="70" inputType="text" id="column13" value="병원 공제금" displayMode="label"></w2:column>
									<w2:column width="70" inputType="text" id="column15" value="삭감항목금액" displayMode="label"></w2:column>
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="column10" value="지급금액" blockSelect="false"
										displayMode="label">
									</w2:column>
								</w2:row>
							</w2:header>
							<w2:gBody id="gBody2" style="">
								<w2:row id="row4" style="">
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="treatment_date" blockSelect="false"
										displayMode="label">
									</w2:column>
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="final_due" blockSelect="false" displayMode="label"
										displayFormat="#,### 원">
									</w2:column>
									<w2:column width="70" inputType="text" id="hospital_prepaid" displayMode="label" displayFormat="#,### 원">
									</w2:column>
									<w2:column width="70" inputType="text" id="deducation_amt" displayMode="label" displayFormat="#,### 원">
									</w2:column>
									<w2:column removeBorderStyle="false" width="70" inputType="text" id="refund_amt" blockSelect="false" displayMode="label"
										displayFormat="#,### 원">
									</w2:column>
								</w2:row>
							</w2:gBody>
						</w2:gridView>
					</xf:group>
				</xf:group><!-- 제외 항목 섹션 -->
				<!-- <xf:group class="excluded_items_section" id=""
					style="margin-top: 20px; padding: 15px; background-color: #d9e3f0; border: 1px solid #ffeaa7; border-radius: 4px;">
					<w2:textbox class="section_title" id="" label="비보상 제외 항목"></w2:textbox>
					<xf:group id="" style="margin-bottom:10px;">
					<w2:span id="" label="총 제외 금액: " style="color:#666;"></w2:span>
					<w2:span id="spn_totalExcluded" style="color:#F57C00;font-weight:bold;font-size:16px;"></w2:span>
					</xf:group>

					<w2:gridView id="grd_excludedItems" style="height:150px;" dataList="data:dlt_excludedItems" autoFit="allColumn"
					readOnly="true" ev:oncelldblclick="scwin.grd_excludedItems_oncelldblclick" visibleRowNum="5">
					<w2:caption style="" id="caption1" value="제외 항목 목록"></w2:caption>
					<w2:header style="" id="header1">
					<w2:row style="" id="row1">
					<w2:column width="80" inputType="text" id="column0" value="항목ID" displayMode="label"></w2:column>
					<w2:column width="120" inputType="text" id="column1" value="카테고리" displayMode="label"></w2:column>
					<w2:column width="250" inputType="text" id="column2" value="제외 사유" displayMode="label"></w2:column>
					<w2:column width="100" inputType="text" id="column3" value="제외 금액" displayMode="label"></w2:column>
					</w2:row>
					</w2:header>
					<w2:gBody style="" id="gBody1">
					<w2:row style="" id="row2">
					<w2:column width="80" inputType="text" id="item_id" displayMode="label"></w2:column>
					<w2:column width="120" inputType="text" id="category_name" displayMode="label"></w2:column>
					<w2:column width="250" inputType="text" id="exc_reason" displayMode="label"></w2:column>
					<w2:column width="100" inputType="text" id="exc_cost" displayMode="label" dataType="number" displayFormat="#,###"></w2:column>
					</w2:row>
					</w2:gBody>
					</w2:gridView>
					</xf:group> -->



				<!-- 오른쪽 패널 -->
				<xf:group class="right_panel" id=""
					style="width: 500px;                background-color: white;                padding: 20px;                border-radius: 8px;                box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
					<w2:textbox class="section_title" id="" label="심사 메모"></w2:textbox>

					<!-- 메모 생성 버튼 -->

					<!-- 메모 입력 영역 -->
					<xf:textarea class="memo_textarea" id="txt_examMemo" ref="data:dma_settlementInfo.generated_memo"
						placeholder="심사메모 생성 버튼을 클릭하여 AI가 자동으로 생성한 메모를 확인하세요."
						style="width: 100%;                min-height: 200px;                padding: 15px;                border: 1px solid #ddd;                border-radius: 4px;                resize: vertical;                font-family: 'Noto Sans KR', sans-serif;                font-size: 14px;                line-height: 1.6;"></xf:textarea>

					<!-- 메모 관련 버튼 -->
					<xf:group style="margin-top:15px;" id="">
						<xf:trigger ev:onclick="scwin.generateMemoFromAPI"
							style="background-color: #2196F3;                color: white;                padding: 12px 24px;                border: none;                border-radius: 4px;                font-size: 16px;                font-weight: bold;                cursor: pointer;                transition: background-color 0.3s;"
							id="btn_generateMemo" type="button" class="btn_generate">
							<xf:label>AI 심사메모 생성</xf:label>
						</xf:trigger>
					</xf:group>
					<xf:group class="button_group" id="" style="display: flex;                gap: 10px;                margin-top: 20px;">
					</xf:group>

					<!-- 심사 액션 버튼들 -->
					<xf:group id="" style="margin-top:30px;padding-top:30px;border-top:1px solid #eee;">
						<w2:textbox class="section_title" id="" label="심사 처리"></w2:textbox>

						<xf:group class="button_group" id="">
							<xf:trigger class="btn_secondary" id="btn_return" type="button">
								<xf:label>반송요청</xf:label>
							</xf:trigger>
							<xf:trigger class="btn_secondary" id="btn_supplement" type="button">
								<xf:label>보완요청</xf:label>
							</xf:trigger>
						</xf:group>

						<xf:group class="button_group" id="">
							<xf:trigger class="btn_secondary" id="btn_approval" type="button">
								<xf:label>결재신청</xf:label>
							</xf:trigger>
							<xf:trigger class="btn_secondary" id="btn_payment" type="button">
								<xf:label>지급처리</xf:label>
							</xf:trigger>
						</xf:group>

						<xf:group id="" style="margin-top:20px;">
							<xf:trigger class="btn_primary" id="btn_complete" type="button" style="width:100%;padding:16px;font-size:16px;"
								ev:onclick="scwin.btn_complete_onclick">
								<xf:label>최종 심사 완료</xf:label>
							</xf:trigger>
						</xf:group>
					</xf:group>
				</xf:group>
			</xf:group>
		</xf:group>
	</body>
</html>