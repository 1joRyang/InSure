<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>COMPONENT</w2:type>
		<w2:buildDate />
		<w2:MSA />
		<xf:model>
			<w2:dataCollection baseNode="map">
				<!-- 검색 조건 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_search">
					<w2:keyInfo>
						<w2:key id="treatment_id" name="치료ID" dataType="text"></w2:key>
						<w2:key id="claim_no" name="청구번호" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 정산 상세정보 데이터맵 추가 -->
				<w2:dataMap baseNode="map" id="dma_settlementInfo">
					<w2:keyInfo>
						<w2:key id="treatment_id" name="치료ID" dataType="text"></w2:key>
						<w2:key id="claim_no" name="청구번호" dataType="text"></w2:key>
						<w2:key id="final_due" name="최종수납액" dataType="text"></w2:key>
						<w2:key id="hospital_prepaid" name="병원공제금" dataType="text"></w2:key>
						<w2:key id="deducation_amt" name="삭감항목금액" dataType="text"></w2:key>
						<w2:key id="refund_amt" name="환급금액" dataType="text"></w2:key>
						<w2:key id="patient_name" name="환자명" dataType="text" defaultValue="홍길동"></w2:key>
						<w2:key id="hospital_name" name="병원명" dataType="text" defaultValue="서울대학교병원"></w2:key>
						<w2:key id="treatment_date" name="진료일" dataType="text" defaultValue="2025-01-15"></w2:key>
						<w2:key id="emp_name" name="심사역" dataType="text" defaultValue="김심사"></w2:key>
						<w2:key id="status" name="상태" dataType="text" defaultValue="심사중"></w2:key>
						<w2:key id="generated_memo" name="생성된메모" dataType="text"></w2:key>
						<w2:key id="receipt_no" name="접수번호" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- API 응답 데이터맵 추가 -->
				<w2:dataMap baseNode="map" id="dma_apiResponse">
					<w2:keyInfo>
						<w2:key id="memo" name="메모" dataType="text"></w2:key>
						<w2:key id="receiptNo" name="접수번호" dataType="text"></w2:key>
						<w2:key id="receipt_no" name="접수번호" dataType="text"></w2:key>
						<w2:key id="status" name="상태" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 페이징 정보용 데이터맵 -->
				<w2:dataMap baseNode="map" id="dmp_settlementVo">
					<w2:keyInfo>
						<w2:key id="SC_treatment_id" name="검색_치료ID" dataType="text"></w2:key>
						<w2:key id="SC_claim_no" name="검색_청구번호" dataType="text"></w2:key>
						<w2:key id="pageIndex" name="페이지번호" dataType="text" defaultValue="1"></w2:key>
						<w2:key id="pageSize" name="페이지크기" dataType="text" defaultValue="10"></w2:key>
						<w2:key id="totalPageCount" name="전체페이지수" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>

				<!-- 제외 항목 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_excludedItems" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="exc_id" name="제외ID" dataType="text"></w2:column>
						<w2:column id="item_id" name="항목ID" dataType="text"></w2:column>
						<w2:column id="treatment_id" name="치료ID" dataType="text"></w2:column>
						<w2:column id="claim_no" name="청구번호" dataType="text"></w2:column>
						<w2:column id="exc_reason" name="제외사유" dataType="text"></w2:column>
						<w2:column id="exc_cost" name="제외금액" dataType="text"></w2:column>
						<w2:column id="exc_category" name="제외카테고리" dataType="text"></w2:column>
						<w2:column id="category_name" name="카테고리명" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 보험 상품 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_insuranceProducts" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="productCode" name="증권번호" dataType="text"></w2:column>
						<w2:column id="coverage" name="상품명" dataType="text"></w2:column>
						<w2:column id="contractor" name="계약자" dataType="text"></w2:column>
						<w2:column id="insuranceAmount" name="보험금액" dataType="text"></w2:column>
						<w2:column id="claimAmount" name="청구금액" dataType="text"></w2:column>
						<w2:column id="paymentAmount" name="지급금액" dataType="text"></w2:column>
						<w2:column id="status" name="상태" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 정산 목록 데이터리스트 -->
				<w2:dataList baseNode="list" id="dlt_settlementVoList" saveRemovedData="true" repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" name="final_due" id="final_due"></w2:column>
						<w2:column dataType="text" name="hospital_prepaid" id="hospital_prepaid"></w2:column>
						<w2:column dataType="text" name="deducation_amt" id="deducation_amt"></w2:column>
						<w2:column dataType="text" name="refund_amt" id="refund_amt"></w2:column>
						<w2:column dataType="text" name="treatment_id" id="treatment_id"></w2:column>
						<w2:column dataType="text" name="claim_no" id="claim_no"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<!-- 전체 데이터를 담을 결과 데이터맵 -->
				<w2:dataMap baseNode="map" id="dma_result">
					<w2:keyInfo>
						<w2:key id="message" name="메시지" dataType="text"></w2:key>
						<w2:key id="resultCode" name="결과코드" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
                
                <!-- FastAPI 요청용 데이터맵 추가 -->
                <w2:dataMap baseNode="map" id="dma_apiRequest">
                    <w2:keyInfo>
                        <w2:key id="settlement" name="정산데이터" dataType="object"></w2:key>
                        <w2:key id="excluded_items" name="제외항목목록" dataType="array"></w2:key>
                        <w2:key id="hospital_type" name="병원타입" dataType="text"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
			</w2:dataCollection>
			<w2:workflowCollection />

			<!-- 정산목록 조회 -->
			<xf:submission id="sbm_selectSettlementVoList" ref='data:json,{"id":"dmp_settlementVo","key":"settlementVo"}'
				target='data:json,{"id":"dlt_settlementVoList","key":"elData.settlementVoList"}' action="/InsWebApp/SETTLEMENTList.pwkjson"
				method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous"
				processMsg="정산정보 리스트를 조회 중입니다." ev:submit="" ev:submitdone="scwin.sbm_settlementList_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>

			<!-- 정산정보 단건 조회 -->
			<xf:submission id="sbm_selectSettlement" ref='data:json,{"id":"dma_search","key":"settlementVo"}'
				target='data:json,{"id":"dma_settlementInfo","key":"elData"}' action="/InsWebApp/SETTLEMENTUpdView.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_selectSettlement_submitdone"
				ev:submiterror="scwin.sbm_selectSettlement_submiterror">
			</xf:submission>
			<!-- 제외항목 목록 조회 - EXCITEMListR 사용 -->
			<xf:submission id="sbm_selectExcludedItems" ref='data:json,{"id":"dma_search","key":"excItemVo"}'
				target='data:json,{"id":"dlt_excludedItems","key":"excitemVoList"}' action="/InsWebApp/EXCITEMListR.pwkjson" method="post"
				mediatype="application/json" mode="asynchronous" ev:submitdone="scwin.sbm_selectExcludedItems_submitdone"
				ev:submiterror="scwin.sbm_selectExcludedItems_submiterror">
			</xf:submission>

			<!-- 보험상품 목록 조회 - 실제 구현 필요 -->
			<xf:submission id="sbm_selectInsuranceProducts" ref='data:json,dma_search' target='data:json,dlt_insuranceProducts'
				action="/InsWebApp/SETTLEMENTInsuranceProductsList.pwkjson" method="post" mediatype="application/json" mode="asynchronous">
			</xf:submission>

			<!-- 심사메모 생성 - 전체 경로 지정 -->
			<xf:submission id="sbm_generateMemo" ref='data:json,dma_search' target='data:json,{"id":"dma_apiResponse","key":"elData"}'
				action="/InsWebApp/SETTLEMENTMemoGenerate.pwkjson" method="post" mediatype="application/json" mode="asynchronous"
				ev:submitdone="scwin.sbm_generateMemo_submitdone" ev:submiterror="scwin.sbm_generateMemo_submiterror">
			</xf:submission>

			<!-- 정산정보 업데이트 -->
			<xf:submission id="sbm_updateSettlement" ref='data:json,dma_settlementInfo' target='data:json,dma_result'
				action="/InsWebApp/SETTLEMENTUpd.pwkjson" method="post" mediatype="application/json" mode="asynchronous">
			</xf:submission>

		</xf:model>
		<w2:layoutInfo />
		<w2:publicInfo method="" />

		<style type="text/css"><![CDATA[
            .container {
             
            }
            
            .header_section {
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .main_content {
                display: flex;
                gap: 20px;
            }
            
            .left_panel {
                flex: 1;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .right_panel {
                width: 500px;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .info_row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
                padding: 8px 0;
                border-bottom: 1px solid #eee;
            }
            
            .info_label {
                color: #666;
                font-weight: 500;
            }
            
            .info_value {
                color: #333;
                font-weight: bold;
            }
            
            .amount_display {
                text-align: center;
                padding: 30px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            
            .amount_number {
                font-size: 36px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            
            .amount_desc {
                font-size: 14px;
                opacity: 0.9;
            }
            
            .memo_textarea {
                width: 100%;
                min-height: 200px;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 4px;
                resize: vertical;
                font-family: 'Noto Sans KR', sans-serif;
                font-size: 14px;
                line-height: 1.6;
            }
            
            .button_group {
                display: flex;
                gap: 10px;
                margin-top: 20px;
            }
            
            .btn_primary {
                flex: 1;
                padding: 12px 20px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
                font-weight: bold;
                cursor: pointer;
                transition: background-color 0.3s;
            }
            
            .btn_primary:hover {
                background-color: #45a049;
            }
            
            .btn_secondary {
                flex: 1;
                padding: 12px 20px;
                background-color: white;
                color: #333;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.3s;
            }
            
            .btn_secondary:hover {
                background-color: #f5f5f5;
                border-color: #999;
            }
            
            .btn_generate {
                background-color: #2196F3;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 4px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: background-color 0.3s;
            }
            
            .btn_generate:hover {
                background-color: #1976D2;
            }
            
            .excluded_items_section {
                margin-top: 20px;
                padding: 15px;
                background-color: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 4px;
            }
            
            .section_title {
                font-size: 16px;
                font-weight: bold;
                margin-bottom: 15px;
                color: #333;
            }
            
            .status_badge {
                display: inline-block;
                padding: 4px 12px;
                border-radius: 12px;
                font-size: 12px;
                font-weight: bold;
            }
            
            .status_pending {
                background-color: #FFF3E0;
                color: #F57C00;
            }
            
            .status_completed {
                background-color: #E8F5E9;
                color: #2E7D32;
            }
            
            .loading_overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 9999;
            }
            
            .loading_spinner {
                width: 50px;
                height: 50px;
                border: 5px solid #f3f3f3;
                border-top: 5px solid #3498db;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        ]]></style>

		<script lazy="false" type="text/javascript"><![CDATA[
// 로딩 표시 함수
scwin.showLoading = function(show) {
    try {
        if (typeof $p.showLoading === 'function') {
            $p.showLoading(show);
        } else if (typeof WebSquare.uiplugin.popup.showLoading === 'function') {
            if (show) {
                WebSquare.uiplugin.popup.showLoading();
            } else {
                WebSquare.uiplugin.popup.hideLoading();
            }
        } else if (typeof gcm !== 'undefined' && gcm.win && typeof gcm.win.showLoading === 'function') {
            gcm.win.showLoading(show);
        } else {
            console.log("Loading indicator:", show);
        }
    } catch (e) {
        console.log("Loading indicator error:", e);
    }
};

scwin.onpageload = function() {
    console.log("=== 페이지 로드 시작 ===");
    
    // 로컬스토리지에 초기값 설정
    localStorage.setItem("treatment_id", "1");
    localStorage.setItem("claim_no", "a52d86a3-5629-11f0-b4f3-bc2411231130");
    
    // 로컬스토리지에서 가져오기
    var treatmentId = localStorage.getItem("treatment_id");
    var claimNo = localStorage.getItem("claim_no");
    
    console.log("로컬스토리지에서 가져온 값 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    // 검색 조건에 설정
    dma_search.set("treatment_id", treatmentId);
    dma_search.set("claim_no", claimNo);
    
    // 페이징 정보 설정
    dmp_settlementVo.set("SC_treatment_id", treatmentId);
    dmp_settlementVo.set("SC_claim_no", claimNo);
    
    // 데이터 조회
    scwin.searchSettlementData();
};

// 정산 데이터 조회 메인 함수
scwin.searchSettlementData = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("정산 데이터 조회 시작 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호가 필요합니다.");
        return;
    }
    
    scwin.showLoading(true);
    
    // 1. 먼저 정산 목록을 조회
    $p.executeSubmission("sbm_selectSettlementVoList");
};

// 정산 목록 조회 완료 콜백
scwin.sbm_settlementList_submitdone = function(e) {
    console.log("=== 정산 목록 조회 완료 ===");
    console.log("정산 목록:", e);
    
    // error 수신시
    var elData = e.responseJSON ? e.responseJSON.elData : null;
    var elHeader = e.responseJSON ? e.responseJSON.elHeader : null;
    
    if (!elHeader || elHeader.resSuc === false) {
        scwin.showLoading(false);
        console.error("정산 목록 조회 실패:", elHeader);
        alert("정산 목록 조회에 실패했습니다.");
        return;
    }
    
    // 목록에서 해당 데이터 찾기
    var rowCount = dlt_settlementVoList.getRowCount();
    console.log("조회된 정산 목록 수:", rowCount);
    
    if (rowCount > 0) {
        var treatmentId = dma_search.get("treatment_id");
        var claimNo = dma_search.get("claim_no");
        var foundIndex = -1;
        
        // 목록에서 매칭되는 데이터 찾기
        for (var i = 0; i < rowCount; i++) {
            var rowTreatmentId = dlt_settlementVoList.getCellData(i, "treatment_id");
            var rowClaimNo = dlt_settlementVoList.getCellData(i, "claim_no");
            
            if (rowTreatmentId === treatmentId && rowClaimNo === claimNo) {
                foundIndex = i;
                break;
            }
        }
        
        if (foundIndex >= 0) {
            // 찾은 데이터를 상세 정보에 설정
            var rowData = dlt_settlementVoList.getRowJSON(foundIndex);
            console.log("찾은 정산 데이터:", rowData);
            
            // dma_settlementInfo에 데이터 설정
            dma_settlementInfo.setJSON(rowData);
            
            // dma_search가 제대로 설정되어 있는지 확인
            if (!dma_search.get("treatment_id") || !dma_search.get("claim_no")) {
                dma_search.set("treatment_id", rowData.treatment_id);
                dma_search.set("claim_no", rowData.claim_no);
            }
            
            // 추가 필드 설정 (테스트용 더미 데이터)
            if (!dma_settlementInfo.get("patient_name")) {
                dma_settlementInfo.set("patient_name", "홍길동");
            }
            if (!dma_settlementInfo.get("hospital_name")) {
                dma_settlementInfo.set("hospital_name", "서울대학교병원");
            }
            if (!dma_settlementInfo.get("treatment_date")) {
                dma_settlementInfo.set("treatment_date", "2025-01-15");
            }
            if (!dma_settlementInfo.get("reviewer")) {
                dma_settlementInfo.set("reviewer", "김심사");
            }
            if (!dma_settlementInfo.get("status")) {
                dma_settlementInfo.set("status", "심사중");
            }
            
            // 단건 조회로 상세 정보 가져오기
            scwin.sbm_selectSettlement();
            
        } else {
            scwin.showLoading(false);
            alert("해당 치료ID와 청구번호에 맞는 정산 데이터를 찾을 수 없습니다.");
            
            // 첫 번째 데이터로 진행할지 확인
            if (confirm("목록의 첫 번째 데이터로 진행하시겠습니까?")) {
                var firstRow = dlt_settlementVoList.getRowJSON(0);
                dma_search.set("treatment_id", firstRow.treatment_id);
                dma_search.set("claim_no", firstRow.claim_no);
                dma_settlementInfo.setJSON(firstRow);
                
                scwin.sbm_selectSettlement();
            }
        }
    } else {
        scwin.showLoading(false);
        alert("조회된 정산 데이터가 없습니다.");
    }
};

// 정산 상세 조회
scwin.sbm_selectSettlement = function(e) {
    console.log("정산 상세 조회 시작");
    
    // 파라미터 확인
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("상세 조회 파라미터 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        console.error("정산 상세 조회 실패 - 필수 파라미터 누락");
        alert("치료ID와 청구번호가 필요합니다.");
        scwin.showLoading(false);
        return;
    }
    
    $p.executeSubmission("sbm_selectSettlement");
};
// 정산 상세 조회 완료 콜백
scwin.sbm_selectSettlement_submitdone = function(e) {
    console.log("=== 정산 상세 조회 완료 ===");
    console.log("상세 조회 응답:", e);
    
    // 금액 표시 업데이트
    scwin.updateAmountDisplay();
    
    // 제외항목 조회
    scwin.searchExcludedItems();
};

// 제외 항목 조회
scwin.searchExcludedItems = function(e) {
    console.log("제외 항목 조회 시작");
    console.log(e);
    console.log(dlt_excludedItems.getTotalRow()); // 실제 행 수 확인
    console.log(dlt_excludedItems.getAllJSON()); // 전체 데이터 확인
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("제외항목 조회 파라미터 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        console.log("제외항목 조회 스킵 - 파라미터 부족");
        scwin.searchInsuranceProducts();
        return;
    }
    
    // EXCITEMListR 호출
    $p.executeSubmission("sbm_selectExcludedItems");
};

// 제외항목 조회 성공 콜백
scwin.sbm_selectExcludedItems_submitdone = function(e) {
    console.log("=== 제외항목 조회 완료 ===");
    console.log("제외항목 응답:", e);
    
    // 응답 데이터 확인
    var responseData = e.responseJSON;
    console.log("응답 데이터 전체:", responseData);
    
    if (!responseData) {
        console.error("응답 데이터 없음");
        scwin.setTestExcludedItems();
        scwin.calculateTotalExcludedAmount();
        scwin.searchInsuranceProducts();
        return;
    }
    
    // excItemVoList 확인 (EXCITEMListR의 응답 구조)
    if (responseData.excItemVoList && Array.isArray(responseData.excItemVoList)) {
        console.log("excItemVoList로 수신, 개수:", responseData.excItemVoList.length);
        
        // 카테고리명 추가
        responseData.excItemVoList.forEach(function(item) {
            if (!item.category_name) {
                // 숫자로 된 exc_category 값 처리
                switch(item.exc_category) {
                    case "1":
                    case "CAT01":
                        item.category_name = "치과, 한방치료 비급여 의료비";
                        break;
                    case "2":
                    case "CAT02":
                        item.category_name = "국민건강보험공단으로부터 환급이 가능한 금액";
                        break;
                    case "3":
                    case "CAT03":
                        item.category_name = "건강검진, 예방접종, 인공유산";
                        break;
                    case "4":
                    case "CAT04":
                        item.category_name = "영양제, 종합비타민제, 호르몬 투여, 보신용 투약 등";
                        break;
                    case "5":
                        item.category_name = "단순피로, 권태, 여드름, 주근깨, 점, 사마귀 등";
                        break;
                    case "6":
                        item.category_name = "보조기, 보장구, 안경, 렌즈 등 진료 재료구입비";
                        break;
                    case "7":
                        item.category_name = "외모개선 목적의 치료로 인하여 발생한 의료비";
                        break;
                    case "8":
                        item.category_name = "제비용(TV시청료, 전화료, 제증명료 등)";
                        break;
                    case "9":
                        item.category_name="산재보험에서 보상받는 의료비";
                        break;
                    case "10":
                        item.category_name="인간면역바이러스(HIV)감염으로 인한 치료비";
                        break;
                    case "11":
                        item.category_name="해외 소재 의료기관에서 발생한 의료비";
                        break;
                    default:
                        item.category_name = "..";
                }
            }
        });
        
        // DataList에 설정
        dlt_excludedItems.setJSON(responseData.excItemVoList);
        console.log("제외항목 데이터 설정 완료");
        
    } else if (Array.isArray(responseData)) {
        // 직접 배열로 오는 경우
        console.log("배열로 직접 수신, 개수:", responseData.length);
        
        responseData.forEach(function(item) {
            if (!item.category_name) {
                switch(item.exc_category) {
                    case "1":
                    case "CAT01":
                        item.category_name = "비급여";
                        break;
                    case "2":
                    case "CAT02":
                        item.category_name = "한도초과";
                        break;
                    case "3":
                    case "CAT03":
                        item.category_name = "건강검진";
                        break;
                    case "4":
                    case "CAT04":
                        item.category_name = "중복청구";
                        break;
                    case "5":
                        item.category_name = "사전승인누락";
                        break;
                    case "6":
                        item.category_name = "서류미비";
                        break;
                    case "7":
                        item.category_name = "보장제외";
                        break;
                    case "8":
                        item.category_name = "기타";
                        break;
                    default:
                        item.category_name = "기타";
                }
            }
        });
        
        dlt_excludedItems.setJSON(responseData);
    } else {
        console.log("예상된 데이터 구조가 아님, 테스트 데이터 사용");
        scwin.setTestExcludedItems();
    }
    
    // 제외항목 총액 계산
    scwin.calculateTotalExcludedAmount();
    
    // 보험상품 조회
    scwin.searchInsuranceProducts();
};

// 제외항목 조회 실패 콜백
scwin.sbm_selectExcludedItems_submiterror = function(e) {
    console.error("=== 제외항목 조회 오류 ===");
    console.error("오류 객체:", e);
    console.error("상태 코드:", e.status);
    console.error("응답 텍스트:", e.responseText);
    
    // 오류가 발생해도 테스트 데이터로 진행
    scwin.setTestExcludedItems();
    
    // 제외항목 총액 계산
    scwin.calculateTotalExcludedAmount();
    
    // 보험상품 조회 계속
    scwin.searchInsuranceProducts();
};



// 금액 표시 업데이트
scwin.updateAmountDisplay = function() {
    var refundAmount = dma_settlementInfo.get("refund_amt");
    
    console.log("금액 업데이트 - refund_amt:", refundAmount);
    
    if (refundAmount) {
        txt_amountNumber.setValue(scwin.formatNumber(refundAmount) + "원");
        txt_amountDesc.setValue("최종 지급 예정 금액");
    } else {
        txt_amountNumber.setValue("0원");
        txt_amountDesc.setValue("지급 예정 금액 없음");
    }
    
    // 상태에 따른 배지 스타일 업데이트
    var status = dma_settlementInfo.get("status");
    if (status === "심사완료") {
        spn_status.removeClass("status_pending");
        spn_status.addClass("status_completed");
    }
    
    // 각 금액 필드가 제대로 표시되는지 확인
    console.log("화면 표시 확인:");
    console.log("- final_due:", dma_settlementInfo.get("final_due"));
    console.log("- hospital_prepaid:", dma_settlementInfo.get("hospital_prepaid"));
    console.log("- deducation_amt:", dma_settlementInfo.get("deducation_amt"));
    console.log("- refund_amt:", dma_settlementInfo.get("refund_amt"));
};

// 숫자 포맷팅
scwin.formatNumber = function(num) {
    if (!num) return "0";
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

// 제외항목 총액 계산
scwin.calculateTotalExcludedAmount = function() {
    var totalExcluded = 0;
    var rowCount = dlt_excludedItems.getRowCount();
    
    console.log("제외항목 총액 계산 - 항목 수:", rowCount);
    
    for (var i = 0; i < rowCount; i++) {
        var excCost = dlt_excludedItems.getCellData(i, "exc_cost");
        var cost = parseInt(excCost) || 0;
        totalExcluded += cost;
        
        console.log("제외항목[" + i + "] 금액:", cost);
    }
    
    console.log("총 제외 금액:", totalExcluded);
    
    // 총 제외 금액 표시
    if (spn_totalExcluded) {
        spn_totalExcluded.setValue(scwin.formatNumber(totalExcluded) + "원");
    }
    
    // 정산 정보에도 반영 (옵션)
    var deductionAmt = dma_settlementInfo.get("deducation_amt");
    if (!deductionAmt || deductionAmt === "0") {
        dma_settlementInfo.set("deducation_amt", totalExcluded.toString());
    }
};

// 제외 항목 그리드 더블클릭 이벤트
scwin.grd_excludedItems_oncelldblclick = function(row, col) {
    var itemId = dlt_excludedItems.getCellData(row, "item_id");
    var reason = dlt_excludedItems.getCellData(row, "exc_reason");
    var amount = dlt_excludedItems.getCellData(row, "exc_cost");
    var category = dlt_excludedItems.getCellData(row, "category_name");
    var excCategory = dlt_excludedItems.getCellData(row, "exc_category");
    
    var detailMsg = "제외항목 상세정보\n" +
                    "================\n" +
                    "항목ID: " + itemId + "\n" +
                    "카테고리: " + category + " (" + excCategory + ")\n" +
                    "제외사유: " + reason + "\n" +
                    "제외금액: " + scwin.formatNumber(amount) + "원";
    
    alert(detailMsg);
};

// FastAPI 심사메모 생성
/* scwin.generateMemoFromAPI = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("심사메모 생성 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }
    
    // 로딩 표시
    scwin.showLoading(true);
    
    // submission 실행
    $p.executeSubmission("sbm_generateMemo");
}; */

// FastAPI 심사메모 생성 - 올바른 데이터 구조로 전송

// FastAPI 심사메모 생성 - WebSquare 표준 방식 사용

// FastAPI 심사메모 생성 - submission 사용
scwin.generateMemoFromAPI = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("심사메모 생성 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }
    
    // FastAPI가 원하는 데이터 구조 생성
    var requestData = scwin.prepareFastAPIRequestData();
    
    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }
    
    console.log("FastAPI 요청 데이터:", JSON.stringify(requestData, null, 2));
    
    // dma_apiRequest에 데이터 설정
    dma_apiRequest.set("settlement", requestData.dma_apiRequest.settlement);
    dma_apiRequest.set("excluded_items", requestData.dma_apiRequest.excluded_items);
    dma_apiRequest.set("hospital_type", requestData.dma_apiRequest.hospital_type);
    
    // 로딩 표시
    scwin.showLoading(true);
    
    // submission 실행
    $c.sbm.execute("sbm_generateMemo");
};
// 1. 누락된 함수 추가
scwin.searchInsuranceProducts = function() {
    console.log("보험상품 조회 시작");
    
    // 임시로 테스트 데이터 설정
    var testInsuranceData = [
        {
            productCode: "INS-2025-001",
            coverage: "실손의료보험",
            contractor: "홍길동",
            insuranceAmount: "500000",
            claimAmount: "248924",
            paymentAmount: "248924",
            status: "처리중"
        }
    ];
    
    dlt_insuranceProducts.setJSON(testInsuranceData);
    console.log("보험상품 데이터 설정 완료");
    
    // 로딩 종료
    scwin.showLoading(false);
};

scwin.generateMemoFromAPI = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("심사메모 생성 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }
    
    // FastAPI가 원하는 데이터 구조 생성
    var requestData = scwin.prepareFastAPIRequestData();
    
    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }
    
    console.log("FastAPI 요청 데이터:", JSON.stringify(requestData, null, 2));
    
    // 로딩 표시
    scwin.showLoading(true);
    
    // 직접 FastAPI 호출
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8000/api/v1/generate-memo", true);
    xhr.setRequestHeader("Content-Type", "application/json");
    
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            scwin.showLoading(false);
            
            if (xhr.status === 200) {
                try {
                    var responseData = JSON.parse(xhr.responseText);
                    console.log("API 응답:", responseData);
                    
                    if (responseData && responseData.memo) {
                        // 메모 설정
                        txt_examMemo.setValue(responseData.memo);
                        dma_settlementInfo.set("generated_memo", responseData.memo);
                        
                        // 접수번호 설정
                        if (responseData.receiptNo || responseData.receipt_no) {
                            var receiptNo = responseData.receiptNo || responseData.receipt_no;
                            dma_settlementInfo.set("receipt_no", receiptNo);
                            spn_receiptNo.setValue("접수번호: " + receiptNo);
                        }
                        
                        alert("심사 메모가 성공적으로 생성되었습니다.");
                    } else {
                        alert("메모 생성에 실패했습니다. 응답 데이터가 없습니다.");
                    }
                } catch (e) {
                    console.error("응답 파싱 오류:", e);
                    alert("응답 처리 중 오류가 발생했습니다.");
                }
            } else if (xhr.status === 0) {
                // CORS 오류 또는 네트워크 오류
                console.error("네트워크 오류 - FastAPI 서버가 실행 중인지 확인하세요.");
                alert("FastAPI 서버에 연결할 수 없습니다.\n서버가 실행 중인지 확인해주세요.");
            } else {
                console.error("API 호출 실패:", xhr.status);
                alert("API 호출에 실패했습니다. (상태: " + xhr.status + ")");
            }
        }
    };
    
    xhr.onerror = function() {
        scwin.showLoading(false);
        console.error("네트워크 오류");
        alert("네트워크 오류가 발생했습니다. FastAPI 서버를 확인해주세요.");
    };
    
    // dma_apiRequest만 보내기 (WebSquare 래핑 제거)
    xhr.send(JSON.stringify(requestData.dma_apiRequest));
};
// 또는 직접 FastAPI 호출 (프록시 우회)
scwin.generateMemoFromAPI_Direct = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    console.log("심사메모 생성 - treatment_id:", treatmentId, "claim_no:", claimNo);
    
    if (!treatmentId || !claimNo) {
        alert("치료ID와 청구번호를 확인해주세요.");
        return;
    }
    
    // FastAPI가 원하는 데이터 구조 생성
    var requestData = scwin.prepareFastAPIRequestData();
    
    if (!requestData) {
        alert("요청 데이터 준비에 실패했습니다.");
        return;
    }
    
    // 로딩 표시
    scwin.showLoading(true);
    
    // 직접 FastAPI 호출
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8000/api/v1/generate-memo", true);
    xhr.setRequestHeader("Content-Type", "application/json");
    
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            scwin.showLoading(false);
            
            if (xhr.status === 200) {
                try {
                    var responseData = JSON.parse(xhr.responseText);
                    console.log("API 응답:", responseData);
                    
                    if (responseData && responseData.memo) {
                        // 메모 설정
                        txt_examMemo.setValue(responseData.memo);
                        dma_settlementInfo.set("generated_memo", responseData.memo);
                        
                        // 접수번호 설정
                        if (responseData.receiptNo || responseData.receipt_no) {
                            var receiptNo = responseData.receiptNo || responseData.receipt_no;
                            dma_settlementInfo.set("receipt_no", receiptNo);
                            spn_receiptNo.setValue("접수번호: " + receiptNo);
                        }
                        
                        alert("심사 메모가 성공적으로 생성되었습니다.");
                    } else {
                        alert("메모 생성에 실패했습니다. 응답 데이터가 없습니다.");
                    }
                } catch (e) {
                    console.error("응답 파싱 오류:", e);
                    alert("응답 처리 중 오류가 발생했습니다.");
                }
            } else {
                console.error("API 호출 실패:", xhr.status);
                alert("API 호출에 실패했습니다. (상태: " + xhr.status + ")");
            }
        }
    };
    
    xhr.send(JSON.stringify(requestData.dma_apiRequest));
};
// FastAPI 요청 데이터 준비 함수
scwin.prepareFastAPIRequestData = function() {
    try {
        // 1. Settlement 데이터 준비
        var settlementData = {
            settlement_id: parseInt(dma_settlementInfo.get("settlement_id") || "1"),
            final_due: parseInt(dma_settlementInfo.get("final_due") || "0"),
            hospital_prepaid: parseInt(dma_settlementInfo.get("hospital_prepaid") || "0"),
            deducation_amt: parseInt(dma_settlementInfo.get("deducation_amt") || "0"),
            refund_amt: parseInt(dma_settlementInfo.get("refund_amt") || "0"),
            treatment_id: parseInt(dma_search.get("treatment_id")),
            claim_no: dma_search.get("claim_no")
        };
        
        // 2. Excluded Items 데이터 준비
        var excludedItems = [];
        var rowCount = dlt_excludedItems.getRowCount();
        
        for (var i = 0; i < rowCount; i++) {
            var item = {
                exc_id: parseInt(dlt_excludedItems.getCellData(i, "exc_id") || (i + 1)),
                item_id: parseInt(dlt_excludedItems.getCellData(i, "item_id") || "0"),
                treatment_id: parseInt(dma_search.get("treatment_id")),
                claim_no: dma_search.get("claim_no"),
                exc_reason: dlt_excludedItems.getCellData(i, "exc_reason") || "",
                exc_cost: parseInt(dlt_excludedItems.getCellData(i, "exc_cost") || "0"),
                exc_category: dlt_excludedItems.getCellData(i, "exc_category") || ""
            };
            excludedItems.push(item);
        }
        
        // 3. 병원 타입 결정
        var hospitalType = "병원급";
        var hospitalName = dma_settlementInfo.get("hospital_name");
        if (hospitalName) {
            if (hospitalName.includes("의원") || hospitalName.includes("클리닉")) {
                hospitalType = "의원급";
            } else if (hospitalName.includes("종합병원") || hospitalName.includes("대학병원")) {
                hospitalType = "종합전문";
            }
        }
        
        // 4. 최종 요청 데이터 구성
        var requestData = {
            dma_apiRequest: {
                settlement: settlementData,
                excluded_items: excludedItems,
                hospital_type: hospitalType
            }
        };
        
        return requestData;
        
    } catch (error) {
        console.error("요청 데이터 준비 오류:", error);
        return null;
    }
};


// 심사메모 생성 성공 콜백
scwin.sbm_generateMemo_submitdone = function(e) {
    scwin.showLoading(false);
    
    console.log("=== 메모 생성 응답 시작 ===");
    console.log("전체 응답 객체:", e);
    
    // 응답 데이터 확인
    var responseData = null;
    
    // 1. dma_apiResponse에서 직접 가져오기
    if (dma_apiResponse) {
        responseData = dma_apiResponse.getJSON();
        console.log("dma_apiResponse 데이터:", responseData);
    }
    
    // 2. e.responseJSON 확인
    if (!responseData && e.responseJSON) {
        responseData = e.responseJSON;
        console.log("e.responseJSON:", responseData);
    }
    
    if (responseData && responseData.memo) {
        // 메모 설정
        txt_examMemo.setValue(responseData.memo);
        dma_settlementInfo.set("generated_memo", responseData.memo);
        
        // 접수번호가 있으면 설정
        if (responseData.receiptNo || responseData.receipt_no) {
            var receiptNo = responseData.receiptNo || responseData.receipt_no;
            dma_settlementInfo.set("receipt_no", receiptNo);
            spn_receiptNo.setValue("접수번호: " + receiptNo);
        }
        
        alert("심사 메모가 성공적으로 생성되었습니다.");
        
    } else {
        alert("심사 메모 생성에 실패했습니다.\n응답 데이터를 확인해주세요.");
        console.error("메모 데이터 없음. 응답:", responseData);
    }
};

// 심사메모 생성 실패 콜백
scwin.sbm_generateMemo_submiterror = function(e) {
    scwin.showLoading(false);
    
    console.error("=== 메모 생성 오류 ===");
    console.error("오류 객체:", e);
    
    var errorMsg = "심사 메모 생성 중 오류가 발생했습니다.\n";
    
    if (e.status === 404) {
        errorMsg += "요청 URL을 찾을 수 없습니다.";
    } else if (e.status === 500) {
        errorMsg += "서버 내부 오류가 발생했습니다.";
    } else if (e.responseText) {
        try {
            var errorData = JSON.parse(e.responseText);
            errorMsg += errorData.message || e.responseText;
        } catch (ex) {
            errorMsg += e.responseText;
        }
    }
    
    alert(errorMsg);
};

// 최종 심사 완료
scwin.btn_complete_onclick = function() {
    var memo = txt_examMemo.getValue();
    
    if (!memo || memo.trim() === "") {
        alert("심사 메모를 먼저 생성해주세요.");
        return;
    }
    
    if (confirm("최종 심사를 완료하시겠습니까?")) {
        // 상태 업데이트
        dma_settlementInfo.set("status", "심사완료");
        
        // 서버에 업데이트
        scwin.showLoading(true);
        $p.executeSubmission("sbm_updateSettlement", {
            success: function(e) {
                scwin.showLoading(false);
                
                // 보험 상품 상태 업데이트
                var rowCount = dlt_insuranceProducts.getRowCount();
                for (var i = 0; i < rowCount; i++) {
                    dlt_insuranceProducts.setCellData(i, "status", "지급완료");
                }
                
                // 상태 배지 업데이트
                spn_status.removeClass("status_pending");
                spn_status.addClass("status_completed");
                spn_status.setValue("심사완료");
                
                alert("심사가 완료되었습니다.");
            },
            error: function(e) {
                scwin.showLoading(false);
                dma_settlementInfo.set("status", "심사중");
                alert("심사 완료 처리 중 오류가 발생했습니다.");
            }
        });
    }
};

// 메모 저장
scwin.btn_save_onclick = function() {
    var memo = txt_examMemo.getValue();
    
    if (memo && memo.trim() !== "") {
        dma_settlementInfo.set("generated_memo", memo);
        
        // 서버에 저장
        scwin.showLoading(true);
        $p.executeSubmission("sbm_updateSettlement", {
            success: function(e) {
                scwin.showLoading(false);
                alert("메모가 저장되었습니다.");
            },
            error: function(e) {
                scwin.showLoading(false);
                alert("메모 저장 중 오류가 발생했습니다.");
            }
        });
    } else {
        alert("저장할 메모가 없습니다.");
    }
};

// 메모 초기화
scwin.btn_reset_onclick = function() {
    if (confirm("메모를 초기화하시겠습니까?")) {
        txt_examMemo.setValue("");
        dma_settlementInfo.set("generated_memo", "");
        dma_settlementInfo.set("receipt_no", "");
        spn_receiptNo.setValue("");
    }
};

// 데이터 새로고침
scwin.refreshData = function() {
    if (confirm("데이터를 새로고침 하시겠습니까?")) {
        scwin.searchSettlementData();
    }
};

// 테스트 데이터 저장
/* scwin.saveTestData = function() {
    var treatmentId = dma_search.get("treatment_id");
    var claimNo = dma_search.get("claim_no");
    
    if (treatmentId && claimNo) {
        localStorage.setItem("treatment_id", treatmentId);
        localStorage.setItem("claim_no", claimNo);
        alert("현재 데이터가 저장되었습니다.");
    } else {
        alert("저장할 데이터가 없습니다.");
    }
}; */

// 테스트 데이터 로드
/* scwin.loadTestData = function() {
    var treatmentId = localStorage.getItem("treatment_id");
    var claimNo = localStorage.getItem("claim_no");
    
    if (treatmentId && claimNo) {
        if (confirm("저장된 데이터로 조회하시겠습니까?\n치료ID: " + treatmentId + "\n청구번호: " + claimNo)) {
            dma_search.set("treatment_id", treatmentId);
            dma_search.set("claim_no", claimNo);
            dmp_settlementVo.set("SC_treatment_id", treatmentId);
            dmp_settlementVo.set("SC_claim_no", claimNo);
            
            scwin.searchSettlementData();
        }
    } else {
        alert("저장된 데이터가 없습니다.");
    }
}; */
// 4. 정산 상세 조회 오류 처리 콜백 추가
scwin.sbm_selectSettlement_submiterror = function(e) {
    console.error("=== 정산 상세 조회 오류 ===");
    console.error("오류 객체:", e);
    
    scwin.showLoading(false);
    
    // 목록에서 가져온 데이터가 이미 있으므로 계속 진행
    if (dma_settlementInfo.get("final_due")) {
        console.log("목록 데이터로 계속 진행");
        
        // 금액 표시 업데이트
        scwin.updateAmountDisplay();
        
        // 제외항목 조회
        scwin.searchExcludedItems();
    } else {
        alert("정산 상세 정보 조회에 실패했습니다.");
    }
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload">
		<xf:group class="container" id="" style="padding: 20px;                background-color: #f5f5f5;">
			<!-- 헤더 영역 -->
			<xf:group class="header_section" id="">
				<xf:group id="" style="display:flex;justify-content:space-between;align-items:center;margin-bottom:15px;">
					<w2:textbox id="" label="보험금 정산 심사" style="font-size:24px;font-weight:bold;"></w2:textbox>
					<xf:group id="" style="display:flex;align-items:center;gap:10px;">
						<w2:span class="status_badge status_pending" id="spn_status" ref="data:dma_settlementInfo.status"></w2:span>
						<xf:trigger type="button" id="btn_refresh" ev:onclick="scwin.refreshData" style="padding:4px 12px;font-size:12px;">
							<xf:label>새로고침</xf:label>
						</xf:trigger>
						<!-- 테스트 버튼 그룹 (개발 환경에서만 표시) -->
						<xf:group id="grp_testButtons" style="display:flex;gap:5px;">
							<xf:trigger type="button" id="btn_saveTest" ev:onclick="scwin.saveTestData"
								style="padding:4px 8px;font-size:11px;background-color:#ff9800;color:white;border:none;border-radius:3px;">
								<xf:label>테스트저장</xf:label>
							</xf:trigger>
							<xf:trigger type="button" id="btn_loadTest" ev:onclick="scwin.loadTestData"
								style="padding:4px 8px;font-size:11px;background-color:#9c27b0;color:white;border:none;border-radius:3px;">
								<xf:label>테스트로드</xf:label>
							</xf:trigger>
						</xf:group>
					</xf:group>
				</xf:group>

				<xf:group id="" style="display:flex;gap:30px;flex-wrap:wrap;">
					<xf:group id="">
						<w2:span id="" label="청구번호: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_settlementInfo.claim_no" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="환자명: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:elData.patient_name" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="병원명: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_settlementInfo.hospital_name" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="진료일: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:dma_settlementInfo.treatment_date" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="" label="심사역: " style="color:#666;"></w2:span>
						<w2:span id="" ref="data:elData.reviewer" style="font-weight:bold;"></w2:span>
					</xf:group>
					<xf:group id="">
						<w2:span id="spn_receiptNo" style="color:#2196F3;font-weight:bold;"></w2:span>
					</xf:group>
				</xf:group>
			</xf:group>

			<!-- 메인 컨텐츠 영역 -->
			<xf:group class="main_content" id="">
				<!-- 왼쪽 패널 -->
				<xf:group class="left_panel" id="">
					<!-- 금액 표시 영역 -->
					<xf:group class="amount_display" id="">
						<w2:textbox class="amount_number" id="txt_amountNumber" label=""></w2:textbox>
						<w2:textbox class="amount_desc" id="txt_amountDesc" label=""></w2:textbox>
					</xf:group>

					<!-- 정산 정보 상세 -->
					<w2:textbox class="section_title" id="" label="정산 정보 상세"></w2:textbox>
					<xf:group id="" style="margin-bottom:20px;background-color: #f9f9f9;padding:15px;border-radius:4px;">
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="진료 ID"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.treatment_id"></w2:span>
						</xf:group>
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="청구번호"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.claim_no"></w2:span>
						</xf:group>
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="최종 수납액"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.final_due" displayFormat="#,###">
								<w2:span id="spn_final_due" ref="data:dma_settlementInfo.final_due" dataType="number" displayFormatter="#,###"></w2:span>
								<w2:span label="원"></w2:span>
							</w2:span>

						</xf:group>
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="병원 공제금"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.hospital_prepaid" displayFormat="#,###">
								<w2:span ref="data:dma_settlementInfo.hospital_prepaid"  dataType="number" displayFormatter="#,###"></w2:span>
								<w2:span label="원"></w2:span>
							</w2:span>
						</xf:group>
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="삭감 항목 금액"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.deducation_amt" dataType="number" displayFormat="#,###">
								<w2:span ref="data:dma_settlementInfo.deducation_amt"  dataType="number" displayFormatter="#,###"></w2:span>
								<w2:span label="원"></w2:span>
							</w2:span>
						</xf:group>
						<xf:group class="info_row" id="">
							<w2:span class="info_label" id="" label="산출금(지급예정)"></w2:span>
							<w2:span class="info_value" id="" ref="data:dma_settlementInfo.refund_amt" displayFormat="#,###">
								<w2:span ref="data:dma_settlementInfo.refund_amt"  dataType="number" displayFormatter="#,###"></w2:span>
								<w2:span label="원"></w2:span>
							</w2:span>
						</xf:group>

					</xf:group>

					<!-- 제외 항목 섹션 -->
					<xf:group class="excluded_items_section" id="">
						<w2:textbox class="section_title" id="" label="비보상 제외 항목"></w2:textbox>
						<xf:group id="" style="margin-bottom:10px;">
							<w2:span id="" label="총 제외 금액: " style="color:#666;"></w2:span>
							<w2:span id="spn_totalExcluded" style="color:#F57C00;font-weight:bold;font-size:16px;"></w2:span>
						</xf:group>

						<w2:gridView id="grd_excludedItems" style="height:150px;" dataList="data:dlt_excludedItems" autoFit="allColumn"
							readOnly="true" ev:oncelldblclick="scwin.grd_excludedItems_oncelldblclick" visibleRowNum="5">
							<w2:caption style="" id="caption1" value="제외 항목 목록"></w2:caption>
							<w2:header style="" id="header1">
								<w2:row style="" id="row1">
									<w2:column width="80" inputType="text" id="column0" value="항목ID" displayMode="label"></w2:column>
									<w2:column width="120" inputType="text" id="column1" value="카테고리" displayMode="label"></w2:column>
									<w2:column width="250" inputType="text" id="column2" value="제외 사유" displayMode="label"></w2:column>
									<w2:column width="100" inputType="text" id="column3" value="제외 금액" displayMode="label"></w2:column>
								</w2:row>
							</w2:header>
							<w2:gBody style="" id="gBody1">
								<w2:row style="" id="row2">
									<w2:column width="80" inputType="text" id="item_id" displayMode="label"></w2:column>
									<w2:column width="120" inputType="text" id="category_name" displayMode="label"></w2:column>
									<w2:column width="250" inputType="text" id="exc_reason" displayMode="label"></w2:column>
									<w2:column width="100" inputType="text" id="exc_cost" displayMode="label" dataType="number" displayFormat="#,###"></w2:column>
								</w2:row>
							</w2:gBody>
						</w2:gridView>
					</xf:group>

					<!-- 보험 상품 그리드 -->
					<w2:textbox class="section_title" id="" label="보험 상품별 지급 내역" style="margin-top:20px;"></w2:textbox>
					<w2:gridView id="grd_insuranceProducts" style="height:180px;" dataList="data:dlt_insuranceProducts" autoFit="allColumn"
						readOnly="true">
						<w2:caption style="" id="caption2" value="보험 상품 목록"></w2:caption>
						<w2:header style="" id="header2">
							<w2:row style="" id="row3">
								<w2:column width="120" inputType="text" id="column4" value="증권번호" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" id="column5" value="상품명" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="column6" value="계약자" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="column7" value="청구금액" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="column8" value="지급금액" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="column9" value="상태" displayMode="label"></w2:column>
							</w2:row>
						</w2:header>
						<w2:gBody style="" id="gBody2">
							<w2:row style="" id="row4">
								<w2:column width="120" inputType="text" id="productCode" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" id="coverage" displayMode="label"></w2:column>
								<w2:column width="80" inputType="text" id="contractor" displayMode="label"></w2:column>
								<w2:column width="100" inputType="text" id="claimAmount" displayMode="label" dataType="number" displayFormat="#,###"></w2:column>
								<w2:column width="100" inputType="text" id="paymentAmount" displayMode="label" dataType="number" displayFormat="#,###"></w2:column>
								<w2:column width="80" inputType="text" id="status" displayMode="label"></w2:column>
							</w2:row>
						</w2:gBody>
					</w2:gridView>
				</xf:group>

				<!-- 오른쪽 패널 -->
				<xf:group class="right_panel" id="">
					<w2:textbox class="section_title" id="" label="심사 메모"></w2:textbox>

					<!-- 메모 생성 버튼 -->
					<xf:group id="" style="margin-bottom:15px;">
						<xf:trigger class="btn_generate" id="btn_generateMemo" type="button" style="width:100%;"
							ev:onclick="scwin.generateMemoFromAPI">
							<xf:label>AI 심사메모 생성</xf:label>
						</xf:trigger>
					</xf:group>

					<!-- 메모 입력 영역 -->
					<xf:textarea class="memo_textarea" id="txt_examMemo" ref="data:dma_settlementInfo.generated_memo"
						placeholder="심사메모 생성 버튼을 클릭하여 AI가 자동으로 생성한 메모를 확인하세요."></xf:textarea>

					<!-- 메모 관련 버튼 -->
					<xf:group class="button_group" id="">
						<xf:trigger class="btn_secondary" id="btn_reset" type="button" ev:onclick="scwin.btn_reset_onclick">
							<xf:label>초기화</xf:label>
						</xf:trigger>
						<xf:trigger class="btn_primary" id="btn_save" type="button" ev:onclick="scwin.btn_save_onclick">
							<xf:label>메모 저장</xf:label>
						</xf:trigger>
					</xf:group>

					<!-- 심사 액션 버튼들 -->
					<xf:group id="" style="margin-top:30px;padding-top:30px;border-top:1px solid #eee;">
						<w2:textbox class="section_title" id="" label="심사 처리"></w2:textbox>

						<xf:group class="button_group" id="">
							<xf:trigger class="btn_secondary" id="btn_return" type="button">
								<xf:label>반송요청</xf:label>
							</xf:trigger>
							<xf:trigger class="btn_secondary" id="btn_supplement" type="button">
								<xf:label>보완요청</xf:label>
							</xf:trigger>
						</xf:group>

						<xf:group class="button_group" id="">
							<xf:trigger class="btn_secondary" id="btn_approval" type="button">
								<xf:label>결재신청</xf:label>
							</xf:trigger>
							<xf:trigger class="btn_secondary" id="btn_payment" type="button">
								<xf:label>지급처리</xf:label>
							</xf:trigger>
						</xf:group>

						<xf:group id="" style="margin-top:20px;">
							<xf:trigger class="btn_primary" id="btn_complete" type="button" style="width:100%;padding:16px;font-size:16px;"
								ev:onclick="scwin.btn_complete_onclick">
								<xf:label>최종 심사 완료</xf:label>
							</xf:trigger>
						</xf:group>
					</xf:group>
				</xf:group>
			</xf:group>
		</xf:group>
	</body>
</html>