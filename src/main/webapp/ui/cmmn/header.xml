<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    	<w2:type>COMPONENT</w2:type>
    	<w2:buildDate />
    	<w2:MSA />
    	<xf:model>
    		<w2:dataCollection baseNode="map">
    			<w2:dataMap baseNode="map" id="dma_logout_request">
    				<w2:keyInfo>
    					<w2:key dataType="text" name="실무자아이디" id="empNo"></w2:key>
    					<w2:key dataType="text" name="비밀번호" id="empPw"></w2:key>
    				</w2:keyInfo>
    			</w2:dataMap>
    			<w2:dataMap baseNode="map" id="dma_logout_response">
    				<w2:keyInfo>
    					<w2:key dataType="text" name="실무자아이디" id="empNo"></w2:key>
    				</w2:keyInfo>
    			</w2:dataMap>
    			<w2:dataMap baseNode="map" id="dma_notificationData">
    				<w2:keyInfo>
    					<w2:key dataType="text" name="emp_no" id="emp_no"></w2:key>
    					<w2:key dataType="text" name="unreadCount" id="unreadCount"></w2:key>
    					<w2:key dataType="number" name="총 알람" id="totalCount"></w2:key>
    				</w2:keyInfo>
    				<w2:data xmlns="">
    					<totalCount>0</totalCount>
    				</w2:data>
    			</w2:dataMap>
    			<w2:dataList baseNode="list" repeatNode="map" id="dlt_notification" saveRemovedData="true">
    				<w2:columnInfo>
    					<w2:column dataType="text" name="알림ID" id="noti_id"></w2:column>
    					<w2:column dataType="text" name="알림내용" id="noti_content"></w2:column>
    					<w2:column dataType="text" name="알림타입" id="noti_type"></w2:column>
    					<w2:column dataType="text" name="수신자ID" id="emp_no"></w2:column>
    					<w2:column dataType="text" name="읽음여부" id="is_read"></w2:column>
    					<w2:column dataType="text" name="생성일시" id="created_date"></w2:column>
    				</w2:columnInfo>
    			</w2:dataList>
    			<w2:dataMap baseNode="map" id="dma_getClaimInfo">
    				<w2:keyInfo>
    					<w2:key dataType="text" name="claim_no" id="claim_no"></w2:key>
    				</w2:keyInfo>
    			</w2:dataMap>
    			<w2:dataMap baseNode="map" id="dma_setNotiData">
    				<w2:keyInfo>
    					<w2:key dataType="text" name="noti_id" id="noti_id"></w2:key>
    					<w2:key dataType="text" name="noti_content" id="noti_content"></w2:key>
    					<w2:key dataType="text" name="noti_type" id="noti_type"></w2:key>
    					<w2:key dataType="text" name="emp_no" id="emp_no"></w2:key>
    					<w2:key dataType="text" name="is_read" id="is_read"></w2:key>
    					<w2:key dataType="text" name="created_date" id="created_date"></w2:key>
    				</w2:keyInfo>
    			</w2:dataMap>
    		</w2:dataCollection>
    		<w2:workflowCollection />
    		<xf:submission id="sbm_EmployeeLogout" action="/InsWebApp/EmployeeLogout.pwkjson" method="post" mediatype="application/json"
    			ref='data:json,[{"id":"dma_logout_request","key":"elData"},{"id":"dma_logout_response","key":"elData"}]' target="" encoding="UTF-8"
    			instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
    			ev:submitdone="scwin.sbm_EmployeeLogout_submitdone" ev:submiterror="scwin.sbm_EmployeeLogout_submiterror" abortTrigger="">
    		</xf:submission>
    		<xf:submission id="sbm_getNotifications" action="/InsWebApp/notification0001GetNotificationList.pwkjson" method="post"
    			mediatype="application/json" ref='data:json,{"id":"dma_getNotiData","key":"elData"}' target='data:json,{"id":"dma_notificationData","key":"elData"}' encoding="UTF-8" instance=""
    			replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
    			ev:submitdone="scwin.sbm_getNotifications_submitdone" ev:submiterror="" abortTrigger="">
    		</xf:submission>
    		<xf:submission id="sbm_getClaimInfo" action="/InsWebApp/CLAIMUpdView.pwkjson" method="post" mediatype="application/json"
    			ref='data:json,{"id":"dma_getClaimInfo","key":"elData"}' target="" encoding="UTF-8" instance="" replace="" errorHandler=""
    			customHandler="" mode="asynchronous" processMsg="" ev:submit="" ev:submitdone="scwin.sbm_getClaimInfo_submitdone"
    			ev:submiterror="scwin.sbm_getClaimInfo_submiterror" abortTrigger="">
    		</xf:submission>
    	</xf:model>
    	<w2:layoutInfo />
    	<w2:publicInfo method="" />
    	<script cache="false" scopeExternal="false" src="/InsWebApp/js/insure/sweet-alert.js" scopeVariable="" type="text/javascript"></script>
    	<script lazy="false" type="text/javascript"><![CDATA[
var notificationDataStore = {};

scwin.onpageload = function() {

    if (!window.isWebSocketInitialized) {
        if (typeof WebSocketService !== "undefined") {
            WebSocketService.init();
            window.isWebSocketInitialized = true;
            console.log("최초 웹소켓 연결을 초기화");
        }
    } else {
        console.log("기존 웹소켓 연결을 재사용");
    }

    scwin.loadInitialNotifications();

    document.addEventListener('notification_received', function(e) {
        
        scwin.addNotificationToList(e.detail);
        scwin.updateNotificationBadge();
    });
};

// 알림 아이템을 동적으로 생성
scwin.createNotificationItem = function(notificationData) {
    try {
        // 알림 타입에 따른 제목 설정
        var titleText = '';
        var buttonText = '';
        var showButton = false;
        
        switch(notificationData.noti_type) {
            case 'supplement_request':
                titleText = '서류 보완 요청';
                buttonText = '서류 보완하기';
                showButton = true;
                break;
            case 'approval_request':
                titleText = '결재 요청';
                break;
            case 'payment_complete':
                titleText = '보험금 지급 완료';
                break;
            default:
                titleText = '새 알림';
                break;
        }

        var cardId = "noti_item_" + notificationData.noti_id;
        var listArea = $p.getComponentById("notification_list_area");
        
        // 읽음 여부에 따른 스타일 설정
        var isRead = notificationData.is_read === 'Y' || notificationData.is_read === true;
        var cardStyle = isRead 
            ? "background: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 8px; padding: 12px; margin-bottom: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); cursor: pointer; opacity: 0.7;"
            : "background: white; border: 1px solid #e0e0e0; border-radius: 8px; padding: 12px; margin-bottom: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); cursor: pointer;";
        
        //  메인 카드 그룹 생성
        var cardGroup = $p.dynamicCreate(cardId, "group", {
            style: cardStyle,
            "ev:onclick": "scwin.handleNotificationClick",
        }, listArea);
        
        notificationDataStore[cardId] = notificationData;
 

      //   제목 생성
        var titleOutput = $p.dynamicCreate(cardId + "_title", "output", {
            style: "font-weight: bold; font-size: 14px; color: #333; margin-bottom: 5px; display: block; width: 100%;"
        }, cardGroup);
        titleOutput.setValue(titleText);

        // 내용 생성
        var contentOutput = $p.dynamicCreate(cardId + "_content", "output", {
            style: "font-size: 12px; color: #666; margin-bottom: 8px; line-height: 1.4; display: block; width: 100%;"
        }, cardGroup);
        contentOutput.setValue(notificationData.noti_content);

        // 날짜 생성
        var dateOutput = $p.dynamicCreate(cardId + "_date", "output", {
            style: "font-size: 11px; color: #999; display: block; width: 100%;"
        }, cardGroup);
        dateOutput.setValue(notificationData.created_date);

        // 보완 요청인 경우 버튼 추가
        if (showButton) {
            var actionButton = $p.dynamicCreate(cardId + "_button", "trigger", {
                style: "background-color: #4A90E2; color: white; border: none; padding: 6px 12px; border-radius: 4px; font-size: 11px; margin-top: 8px; cursor: pointer;"
            }, cardGroup);
            
            actionButton.setValue(buttonText);
            actionButton.setUserData("notiId", notificationData.noti_id);
            
            // 버튼 클릭 이벤트 바인딩
            actionButton.bind("onclick", function(e) {
                e.stopPropagation();
                var notiId = e.target.getUserData("notiId");
                scwin.handleNotificationAction(notiId);
            });
        }

        console.log('새 알림 카드를 동적으로 생성했습니다.');

    } catch (e) {
        console.error('알림 카드 생성 실패:', e);
    }
};

scwin.handleNotificationClick = function(e) {
    try {
        
        // 청구번호 추출
        var targetId = e.target.id;
        var notiId = targetId.match(/NOTI_\d+/)[0];
        var cardId = "noti_item_" + notiId;
        var notificationData = notificationDataStore[cardId];
        
        // 청구번호 추출
        var claimNumber = null;
        if (notificationData.noti_content) {
            var match1 = notificationData.noti_content.match(/No:\s*([^)]+)/);
            var match2 = notificationData.noti_content.match(/2025-[A-Z]+-\d+|[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);
            claimNumber = match2 ? match2[0] : (match1 ? match1[1] : null);
        }
        
        if (!claimNumber) {
            console.error("청구번호 추출 실패");
            return;
        }
        
        console.log("추출된 청구번호:", claimNumber);
        
        // 데이터맵 설정
        if (dma_getClaimInfo) {
            dma_getClaimInfo.set("claim_no", claimNumber);
            console.log("데이터맵 설정 완료:", dma_getClaimInfo.getJSON());
        } else {
            console.error("dma_getClaimInfo를 찾을 수 없습니다");
            return;
        }
        
        $c.sbm.execute(sbm_getClaimInfo);
        
    } catch (err) {
        console.error("오류:", err);
    }
};


/**
 * 알림을 읽음으로 표시
 */
scwin.markNotificationAsRead = function(notiId) {
    try {
        const empNo = JSON.parse(localStorage.getItem("employee"))?.empNo;
        if (!empNo) {
            console.error("사용자 정보를 찾을 수 없습니다.");
            return;
        }
        
        dma_markAsRead.set("notiId", notiId);
        dma_markAsRead.set("empNo", empNo);
        
        $c.sbm.execute(sbm_markAsRead);
        
        console.log("알림 읽음 처리 요청:", notiId);
        
    } catch (e) {
        console.error("알림 읽음 처리 실패:", e);
    }
};

/**
 * 읽음 처리 완료 콜백
 */
scwin.sbm_markAsRead_submitdone = function(e) {
    try {
        console.log("알림 읽음 처리 완료");
        
        var currentUnread = parseInt(dma_notificationData.get("unreadCount")) || 0;
        if (currentUnread > 0) {
            var newUnreadCount = currentUnread - 1;
            dma_notificationData.set("unreadCount", newUnreadCount);
            
            const badge = $p.getComponentById("noti_badge");
            if (badge) {
                badge.setValue(newUnreadCount);
                badge.setStyle("display", newUnreadCount > 0 ? "block" : "none");
            }
        }
        
    } catch (err) {
        console.error("읽음 처리 완료 콜백 오류:", err);
    }
};

/**
 * 알림 목록 추가 함수
 */
scwin.addNotificationToList = function(notificationData) {
    try {
        scwin.createNotificationItem(notificationData);
        console.log('새 알림이 목록에 추가되었습니다:', notificationData);
    } catch (e) {
        console.error('알림 목록 추가 실패:', e);
    }
};

/**
 * 알림 배지 업데이트
 */
scwin.updateNotificationBadge = function() {
    try {
        const currentUnread = parseInt(dma_notificationData.get("unreadCount")) || 0;
        const newUnreadCount = currentUnread + 1;

        dma_notificationData.set("unreadCount", newUnreadCount);
        
        const badge = $p.getComponentById("noti_badge");
        if (badge) {
            badge.setValue(newUnreadCount);
            badge.setStyle("display", "block");
        }
    } catch (e) {
        console.error("알림 배지 업데이트 실패:", e);
    }
};

/**
 * 알림 목록과 미읽음 개수를 가져오기
 */
scwin.loadInitialNotifications = function() {
    const empNo = JSON.parse(localStorage.getItem("employee"))?.empNo;
    if (empNo) {
        dma_setNotiData.set("emp_no", empNo);
        $c.sbm.execute(sbm_getNotifications);
    }
};


scwin.sbm_getNotifications_submitdone = function(e) {
    try {
        const responseData = e.responseJSON.elData;
        if (!responseData) return;

        var listArea = $p.getComponentById("notification_list_area");
        if (listArea) {

            var children = listArea.getChildren();
            for (var i = children.length - 1; i >= 0; i--) {
                var child = children[i];
                if (child && child.getID && child.getID().indexOf("noti_item_") === 0) {
                    listArea.removeChild(child);
                }
            }
        }
        
        if (responseData.notificationVoList && responseData.notificationVoList.length > 0) {
            responseData.notificationVoList.forEach(function(item) {
                scwin.createNotificationItem(item);
            });
            
            var noMsgArea = $p.getComponentById("no_notification_message");
            if (noMsgArea) {
                noMsgArea.setStyle("display", "none");
            }
        } else {
            var noMsgArea = $p.getComponentById("no_notification_message");
            if (noMsgArea) {
                noMsgArea.setStyle("display", "block");
            }
        }

        const unreadCount = responseData.unreadCount || 0;
        dma_notificationData.set("unreadCount", unreadCount);
        dma_notificationData.set("totalCount", responseData.totalCount || 0);

        const badge = $p.getComponentById("noti_badge");
        badge.setValue(unreadCount);
        badge.setStyle("display", unreadCount > 0 ? "block" : "none");

    } catch(err) {
        console.error("초기 알림 데이터 처리 중 오류:", err);
    }
};

/**
 * 종 아이콘 클릭 시 알림 패널을 토글
 */
scwin.noti_btn_onclick = function(e) {
    const panel = $p.getComponentById("notification_panel");
    if (panel.getStyle("display") === "none") {
        panel.setStyle("display", "block");
    } else {
        panel.setStyle("display", "none");
    }
};

scwin.img_logo_onclick = function (e) {
    localStorage.setItem("nowSelect", "myClaim");
    location.href="/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/web/webWrapper.xml";
};

scwin.logout_btn_onclick = function (e) {
	Swal.fire({
        title: "로그아웃 하시겠습니까?",
        showCancelButton: true,
        confirmButtonColor: '#4FACFE',
        cancelButtonColor: '#d1d1d1',
        confirmButtonText: '확인',
        cancelButtonText: '취소',
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            $c.sbm.execute(sbm_EmployeeLogout);
        }
    });
};

// 로그아웃 실패 시 처리
scwin.sbm_EmployeeLogout_submiterror = function(e) {
    console.error("로그아웃 실패:", e);
};

scwin.sbm_EmployeeLogout_submitdone = function (e) {
    console.log("로그아웃 완료");
    
    // 로컬스토리지 정리
    localStorage.removeItem("user");
    localStorage.removeItem("simple");
    localStorage.removeItem("employee");
    localStorage.removeItem("notifications");
    
    // 로그인 페이지로 이동
    location.href = "/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/web/login/login_pc_ver.xml";
};

scwin.sbm_getClaimInfo_submitdone = function(e) {
    try {
        
        var responseData = e.responseJSON;
        
        if (!responseData.elHeader.resSuc) {
            console.error("서버 처리 실패:", responseData.elHeader.resMsg);
            return;
        }
        
        var claimInfo = responseData.elData;
        console.log("조회된 청구 정보:", claimInfo);

        const claim = {
            claimNo: claimInfo.claim_no,
            ID: claimInfo.ID,
            userName: claimInfo.user_name,
            empNo:claimInfo.emp_no,
            status: claimInfo.status
        };
        localStorage.setItem("claim", JSON.stringify(claim));

        console.log(claim);
        console.log("localStorage 업데이트 완료:");

        location.href = "/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/web/audit/insure_first.xml";
        
    } catch (err) {
        console.error("처리 중 오류:", err);
    }
};


scwin.sbm_getClaimInfo_submiterror = function(e) {
    try {
        
        var tempClaimNumber = sessionStorage.getItem("tempClaimNumber");
        var notificationType = sessionStorage.getItem("tempNotificationType");
        
        
        // 사용자에게 오류 알림
        var errorMsg = "청구 정보를 불러오는데 실패했습니다.";
        if (e.responseStatusCode) {
            errorMsg += " (상태코드: " + e.responseStatusCode + ")";
        }
        
        alert(errorMsg + "\n\n관리자에게 문의하세요.");
        
        // 임시 데이터 정리
        sessionStorage.removeItem("tempClaimNumber");
        sessionStorage.removeItem("tempNotificationType");
        
        
    } catch (err) {
        console.error("오류 처리 중 추가 오류:", err);
        
        sessionStorage.removeItem("tempClaimNumber");
        sessionStorage.removeItem("tempNotificationType");
    }
};]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload">
    	<xf:group class="sub_contents" id="" meta_snippetCategory="00_화면시작" meta_snippetKeyComponent="true" meta_snippetName="0_01 페이지시작"
    		style="background-color: white;border-bottom: 1px solid #bfbfbf; font-family: 'Pretendard Variable', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;width: calc(100%- 230px);">
    		<xf:group class="pgtbox" id="" meta_snippetCategory="02_타이틀" meta_snippetKeyComponent="true" meta_snippetName="2_01 페이지타이틀"
    			style="margin: 0">

    			<!-- 알림 패널 - 그리드뷰를 동적 컨테이너로 변경 -->
    			<xf:image src="/InsWebApp/images/insure/insureLogo_no.png" ev:onclick="scwin.img_logo_onclick" style="width:130px;pointer: cursor;" id="img_logo">
    			</xf:image>
    			<xf:group
    				style="position:absolute; right:50px; top:60px; width:350px; max-height:400px; background-color:white; border:1px solid #ddd; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); display:none; z-index:1000; padding:0;"
    				id="notification_panel">

    				<!-- 패널 헤더 -->
    				<xf:group
    					style="padding: 15px; border-bottom: 1px solid #eee; background-color: #f8f9fa; border-radius: 8px 8px 0 0;">
    					<w2:textbox style="font-weight: bold; font-size: 16px; color: #333;" label="알림" id="panel_title"></w2:textbox>
    				</xf:group>

    				<!-- 알림 목록 컨테이너 -->
    				<xf:group style="padding: 10px; max-height: 320px; overflow-y: auto; overflow-x: hidden;" id="notification_list_area">
    					<!-- 동적으로 생성되는 알림 카드들이 여기에 추가됩니다 -->
    				</xf:group>

    				<!-- 알림이 없을 때 표시할 메시지 -->
    				<xf:group style="padding: 40px; text-align: center; color: #999; display: none;" id="no_notification_message">
    					<w2:textbox label="새로운 알림이 없습니다." style="font-size: 14px;"></w2:textbox>
    				</xf:group>
    			</xf:group>

    			<xf:group class="breadcrumb" id="" style="">
    				<xf:group id="" style="" tagname="ul">
    					<xf:group id="" style="" tagname="li"></xf:group>
    				</xf:group>
    			</xf:group>

    			<!-- 알림 버튼 -->
    			<w2:button style="background: transparent; border: none; cursor: pointer; position: relative;" id="noti_btn"
    				ev:onclick="scwin.noti_btn_onclick">
    				<xf:output label=""
    					style="position: absolute; top: -5px; right: -5px; background: #ff4757; color: white; border-radius: 50%; min-width: 16px; height: 16px; font-size: 10px; text-align: center; display: none; z-index: 10; line-height: 16px;"
    					id="noti_badge">
    					<xf:label></xf:label>
    				</xf:output>
    				<xf:image src="/InsWebApp/images/insure/noti.png"
    					style="width:20px; height:20px; vertical-align: middle; margin-right: 10px" id="noti_icon">
    				</xf:image>
    			</w2:button>

    			<w2:button ev:onclick="scwin.logout_btn_onclick"
    				style="width: 80px;height: 23px;background-color:#FFFFFF; font-family: 'Pretendard Variable', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;"
    				id="logout_btn" label="로그아웃">
    			</w2:button>
    		</xf:group>
    	</xf:group>

    	<script lazy="false" type="text/javascript" src="/InsWebApp/js/insure/websocket.js"></script>
    </body>
</html>