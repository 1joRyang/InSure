<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head>
        <w2:type>COMPONENT</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map">
                <!-- assignRuleVo를 위한 별도 dataMap 추가 -->
                <w2:dataMap baseNode="map" id="dmp_assignRuleVo" style="">
                    <w2:keyInfo>
                        <w2:key dataType="text" id="rule_id" name="규칙ID"></w2:key>
                        <w2:key dataType="text" id="keyword" name="키워드"></w2:key>
                        <w2:key dataType="text" id="dept" name="부서명"></w2:key>
                    </w2:keyInfo>
                </w2:dataMap>
                
                <!-- 기존 modalData는 그대로 유지 -->
                <w2:dataMap baseNode="map" id="dma_modalData">
                    <w2:keyInfo>
                        <w2:key dataType="text" id="keyword" name="키워드"/>
                        <w2:key dataType="text" id="department" name="부서"/>
                        <!-- 페이징을 위한 키 추가 -->
                        <w2:key dataType="text" id="pageIndex" name="페이지번호" defaultValue="1"/>
                        <w2:key dataType="text" id="pageSize" name="페이지사이즈" defaultValue="100"/>
                    </w2:keyInfo>
                </w2:dataMap>
                
                <!-- 부서 목록을 저장할 dataList -->
                <w2:dataList baseNode="list" id="dlt_departmentList" saveRemovedData="true">
                    <w2:columnInfo>
                        <w2:column dataType="text" id="dept_id" name="부서ID"/>
                        <w2:column dataType="text" id="dept_name" name="부서명"/>
                    </w2:columnInfo>
                </w2:dataList>
                
                <!-- 배정규칙 목록을 저장할 dataList 추가 -->
                <w2:dataList baseNode="list" id="dlt_assignRuleList" saveRemovedData="true">
                    <w2:columnInfo>
                        <w2:column dataType="text" id="rule_id" name="규칙ID"/>
                        <w2:column dataType="text" id="keyword" name="키워드"/>
                        <w2:column dataType="text" id="dept" name="부서명"/>
                    </w2:columnInfo>
                </w2:dataList>
            </w2:dataCollection>
            
            <!-- submission 수정 -->
            <xf:submission id="sbm_selectDepartmentList" 
                ref='data:json,{"id":"dma_modalData","key":"insDeptVo"}' 
                target='data:json,{"id":"dlt_departmentList","key":"elData.insDeptVoList"}' 
                action="/InsWebApp/insdept0001List.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_selectDepartmentList_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <!-- 자동배정 규칙 저장 - 올바른 형식으로 수정 -->
            <xf:submission id="sbm_saveAutoAssignRule" 
                ref='data:json,{"id":"dmp_assignRuleVo","key":"assignRuleVo"}' 
                target='data:json,dmp_assignRuleVo' 
                action="/InsWebApp/assignrule0001Ins.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_saveAutoAssignRule_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <!-- 자동배정 규칙 삭제 -->
            <xf:submission id="sbm_deleteAutoAssignRule" 
                ref='data:json,{"id":"dmp_assignRuleVo","key":"assignRuleVo"}' 
                target='data:json,dmp_assignRuleVo' 
                action="/InsWebApp/assignrule0001Del.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_deleteAutoAssignRule_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <!-- 자동배정 규칙 목록 조회 -->
            <xf:submission id="sbm_selectAssignRuleList" 
                ref='data:json,{"id":"dmp_assignRuleVo","key":"assignRuleVo"}' 
                target='data:json,{"id":"dlt_assignRuleList","key":"elData.assignRuleVoList"}' 
                action="/InsWebApp/assignrule0001List.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_selectAssignRuleList_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <!-- 배치 자동 배정 실행 -->
            <xf:submission id="sbm_runAutoAssignmentBatch" 
                ref='data:json,{}' 
                target='data:json,dmp_assignRuleVo' 
                action="/InsWebApp/assignrule0009RunBatch.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_runAutoAssignmentBatch_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <!-- 청구 유형별 배정 미리보기 -->
            <xf:submission id="sbm_previewAssignment" 
                ref='data:json,{"id":"dmp_assignRuleVo","key":"assignRuleVo"}' 
                target='data:json,dmp_assignRuleVo' 
                action="/InsWebApp/assignrule0010PreviewAssignment.pwkjson" 
                method="post" 
                mediatype="application/json" 
                encoding="UTF-8" 
                instance="" 
                replace="" 
                errorHandler="" 
                customHandler="" 
                mode="asynchronous" 
                processMsg="" 
                ev:submit="" 
                ev:submitdone="scwin.sbm_previewAssignment_submitdone" 
                ev:submiterror="" 
                abortTrigger="">
            </xf:submission>
            
            <w2:workflowCollection/>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method=""/>
        <style type="text/css"><![CDATA[
            /* 기존 스타일 유지 */
            .editing {
                background-color: #fffbf0 !important;
                border: 1px solid #ff9800 !important;
            }
            
            #rule_container .rule_item:hover {
                border-color: #4285f4;
                box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            }
            
            .btn_cm {
                background-color: #4285f4;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }
            
            .btn_cm:hover {
                background-color: #3367d6;
            }
            
            .btn_delete {
                background-color: #dc3545;
            }
            
            .btn_delete:hover {
                background-color: #c82333;
            }
            
            select {
                width: 250px;
                padding: 5px;
                border: 1px solid #ddd;
                border-radius: 3px;
                background-color: white;
                cursor: pointer;
            }
            
            select:focus {
                outline: none;
                border-color: #4285f4;
            }
            
            /* 규칙 항목 내 텍스트 표시 스타일 추가 */
            .rule_keyword {
                font-size: 14px;
                color: #333;
                font-weight: 500;
                display: inline-block;
                margin-left: 5px;
            }
            
            .rule_dept {
                font-size: 13px;
                color: #666;
                display: inline-block;
                margin-left: 5px;
            }
        ]]></style>
        <script lazy="false" type="text/javascript"><![CDATA[
scwin.onpageload = async function () {
    // 부서 목록을 저장할 배열 초기화
    scwin.departmentList = [
        { value: "", text: "-- 부서를 선택하세요 --" }
    ];
    await scwin.loadDepartmentList();
};

// 부서 정보를 INSDEPT 테이블에서 조회하는 함수
scwin.loadDepartmentList = async function () {
    // 페이징 정보 설정
    dma_modalData.set("pageIndex", "1");
    dma_modalData.set("pageSize", "10"); // 충분히 큰 값으로 설정

    // submission 호출
    await $c.sbm.execute($p, sbm_selectDepartmentList);
};

// 부서 정보 조회 submission 완료 콜백 
scwin.sbm_selectDepartmentList_submitdone = async function (e) {
    // 전체 응답 데이터 확인
    console.log("전체 응답 데이터:", e.responseJSON);

    var elData = e.responseJSON.elData;
    var elHeader = e.responseJSON.elHeader;

    if (elHeader == null || elHeader == "" || elHeader == "undefined" || elHeader.resSuc == false) {
        console.error("부서 정보 조회 실패:", elHeader ? elHeader.resMsg : "알 수 없는 오류");
        return false;
    }

    // 부서 목록 초기화
    scwin.departmentList = [{ value: "", text: "-- 부서를 선택하세요 --" }];

    // 조회된 부서 정보를 departmentList에 추가
    // dlt_departmentList에서 데이터 가져오기
    var deptCount = dlt_departmentList.getRowCount();
    console.log("조회된 부서 수:", deptCount);

    for (var i = 0; i < deptCount; i++) {
        var deptId = dlt_departmentList.getCellData(i, "dept_id");
        var deptName = dlt_departmentList.getCellData(i, "dept_name");

        if (deptId && deptName) {
            scwin.departmentList.push({
                value: deptId,
                text: deptName
            });
        }
    }

    console.log("부서 목록 로드 완료:", scwin.departmentList);

    // 부서 목록 로드가 완료된 후에 규칙 목록을 조회
    await scwin.loadExistingRules();
};

// 기존 규칙 목록 조회
scwin.loadExistingRules = async function () {
    console.log("loadExistingRules 호출됨");
    console.log("현재 departmentList:", scwin.departmentList);

    // dlt_assignRuleList 초기화 - 기존 데이터 모두 제거
    dlt_assignRuleList.removeAll();

    // 조회 조건 초기화
    dmp_assignRuleVo.set("rule_id", "");
    dmp_assignRuleVo.set("keyword", "");
    dmp_assignRuleVo.set("dept", "");

    // submission 호출
    await $c.sbm.execute($p, sbm_selectAssignRuleList);
};

// 규칙 목록 조회 완료 콜백
scwin.sbm_selectAssignRuleList_submitdone = async function (e) {
    console.log("배정규칙 조회 응답:", e.responseJSON);

    var elData = e.responseJSON.elData;
    var elHeader = e.responseJSON.elHeader;

    if (elHeader && elHeader.resSuc) {
        // Generator의 기존 항목들을 모두 제거
        rule_gen.removeAll();

        // dlt_assignRuleList의 실제 데이터 확인
        console.log("dlt_assignRuleList 전체 데이터:", dlt_assignRuleList.getAllJSON());

        // 기존 규칙들을 Generator에 추가
        var ruleCount = dlt_assignRuleList.getRowCount();
        console.log("조회된 규칙 수:", ruleCount);

        // 모든 규칙을 순차적으로 추가 (async/await 사용)
        for (var i = 0; i < ruleCount; i++) {
            var keyword = dlt_assignRuleList.getCellData(i, "keyword");
            var dept = dlt_assignRuleList.getCellData(i, "dept");
            var ruleId = dlt_assignRuleList.getCellData(i, "rule_id");

            console.log("규칙 확인 - 키워드:", keyword, "부서:", dept, "ID:", ruleId);

            if (keyword && dept) {  // 키워드와 부서가 있는 경우에만 추가
                await scwin.addRuleToGenerator(keyword, dept, ruleId);
            }
        }
        
        console.log("모든 규칙 추가 완료");
    }
};

// Generator에 규칙 추가하는 헬퍼 함수
scwin.addRuleToGenerator = async function (keyword, deptName, ruleId) {
    console.log("addRuleToGenerator 시작 - 현재 자식 수:", rule_gen.getChildrenCount());

    // Generator에 새 항목 추가 (인덱스 없이)
    await rule_gen.insertChild();

    var childCount = rule_gen.getChildrenCount();
    console.log("insertChild 후 자식 수:", childCount);

    // 마지막에 추가된 항목의 인덱스
    var targetIndex = childCount - 1;

    // await로 완료되었으므로 바로 접근 가능
    var _keywordDisplay = rule_gen.getChild(targetIndex, "item_keyword_display");
    var _deptDisplay = rule_gen.getChild(targetIndex, "item_dept_display");
    var _editBtn = rule_gen.getChild(targetIndex, "item_edit");
    var _deleteBtn = rule_gen.getChild(targetIndex, "item_delete");
    var _ruleItem = rule_gen.getChild(targetIndex, "rule_item");

    if (_keywordDisplay && _deptDisplay && _editBtn && _deleteBtn) {
        // display 요소에 값 설정
        await _keywordDisplay.setValue(keyword);
        await _deptDisplay.setValue(deptName);

        // 버튼과 rule_item에 규칙 정보 저장
        _editBtn.setUserData("ruleId", ruleId || "");
        _editBtn.setUserData("keyword", keyword);
        _editBtn.setUserData("deptName", deptName);
        _editBtn.setUserData("itemIndex", targetIndex);

        _deleteBtn.setUserData("ruleId", ruleId || "");
        _deleteBtn.setUserData("keyword", keyword);
        _deleteBtn.setUserData("deptName", deptName);
        _deleteBtn.setUserData("itemIndex", targetIndex);

        // rule_item에도 정보 저장
        if (_ruleItem) {
            _ruleItem.setUserData("ruleId", ruleId || "");
            _ruleItem.setUserData("keyword", keyword);
            _ruleItem.setUserData("deptName", deptName);
        }

    } else {
        console.error("필요한 컴포넌트를 찾을 수 없습니다. 인덱스:", targetIndex);
    }
};

// 부서명을 부서ID로 가져오는 헬퍼 함수
scwin.getDepartmentName = function (deptId) {
    for (var i = 0; i < scwin.departmentList.length; i++) {
        if (scwin.departmentList[i].value === deptId) {
            return scwin.departmentList[i].text;
        }
    }
    return deptId; // 찾지 못한 경우 ID 반환
};

// 부서ID를 부서명으로 가져오는 헬퍼 함수
scwin.getDepartmentId = function (deptName) {
    for (var i = 0; i < scwin.departmentList.length; i++) {
        if (scwin.departmentList[i].text === deptName) {
            return scwin.departmentList[i].value;
        }
    }
    return ""; // 찾지 못한 경우 빈 문자열 반환
};

// 추가 버튼 클릭 - 웹스퀘어 방식으로 수정
scwin.add_rule_onclick = async function (e) {
    scwin.showModal("add", null, null, null);
};

// 수정 버튼 클릭 - 모달 팝업으로 변경
scwin.item_edit_onclick = async function (e) {


    try {
        // 저장된 데이터 가져오기
        var ruleId = this.getUserData("ruleId");
        var keyword = this.getUserData("keyword");
        var deptName = this.getUserData("deptName");

        // 모달 팝업 열기
        scwin.showModal("edit", keyword, deptName, ruleId);

    } catch (error) {
        console.error("수정 버튼 처리 중 오류:", error);
    }
};

// 통합된 모달 표시 함수
scwin.showModal = function (mode, keyword, deptName, ruleId) {
    // 기존 모달이 있으면 제거
    if (document.getElementById('modalContainer')) {
        document.getElementById('modalContainer').remove();
    }

    var modalTitle = mode === "add" ? "규칙 추가" : "규칙 수정";
    var keywordValue = mode === "add" ? "" : keyword;
    var deptId = mode === "add" ? "" : scwin.getDepartmentId(deptName);

    // 부서 옵션 HTML 생성
    var departmentOptions = scwin.departmentList.map(function (dept) {
        var selected = dept.value === deptId ? ' selected' : '';
        return '<option value="' + dept.value + '"' + selected + '>' + dept.text + '</option>';
    }).join('');

    // 임시 div로 모달 생성
    var modalContainer = document.createElement('div');
    modalContainer.id = 'modalContainer';

    var customModal = document.createElement('div');
    customModal.id = 'customModal';
    customModal.style.cssText = 'position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; border:1px solid #ccc; padding:20px; z-index:9999; box-shadow:0 0 10px rgba(0,0,0,0.5); border-radius:5px; width:400px;';

    customModal.innerHTML =
        '<h3 style="margin-top:0;">' + modalTitle + '</h3>' +
        '<div style="margin-bottom:15px;">' +
        '<label style="display:inline-block; width:80px; font-weight:bold;">키워드:</label>' +
        '<input type="text" id="modalKeyword" value="' + keywordValue + '" style="width:250px; padding:5px;" />' +
        '</div>' +
        '<div style="margin-bottom:15px;">' +
        '<label style="display:inline-block; width:80px; font-weight:bold;">부서:</label>' +
        '<select id="modalDepartment" style="width:262px; padding:5px;">' +
        departmentOptions +
        '</select>' +
        '</div>' +
        '<div style="text-align:center; margin-top:20px;">' +
        '<button id="modalConfirmBtn" style="padding:8px 20px; margin-right:10px; cursor:pointer; background-color:#4285f4; color:white; border:none; border-radius:4px;">확인</button>' +
        '<button id="modalCancelBtn" style="padding:8px 20px; cursor:pointer; background-color:#6c757d; color:white; border:none; border-radius:4px;">취소</button>' +
        '</div>';

    var modalBackdrop = document.createElement('div');
    modalBackdrop.id = 'modalBackdrop';
    modalBackdrop.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:9998;';

    modalContainer.appendChild(modalBackdrop);
    modalContainer.appendChild(customModal);
    document.body.appendChild(modalContainer);

    // 이벤트 핸들러를 직접 함수로 정의 - async 추가
    var confirmHandler = async function () {
        var newKeyword = document.getElementById('modalKeyword').value;
        var newDeptId = document.getElementById('modalDepartment').value;

        if (!newKeyword || !newDeptId) {
            alert("키워드와 부서를 모두 선택해주세요.");
            return;
        }

        var newDeptName = scwin.getDepartmentName(newDeptId);

        // 모달 닫기
        document.getElementById('modalContainer').remove();

        if (mode === "add") {
            // 새 규칙을 즉시 화면에 추가 (await 사용)
            await scwin.addRuleToGenerator(newKeyword, newDeptName, "");
            
            // 서버에 저장
            scwin.saveAutoAssignRule(newKeyword, newDeptName);

        } else {
            // 기존 규칙 수정 - 화면 업데이트 추가
            var childCount = rule_gen.getChildrenCount();
            for (var i = 0; i < childCount; i++) {
                var _editBtn = rule_gen.getChild(i, "item_edit");
                if (_editBtn && _editBtn.getUserData("ruleId") === ruleId) {
                    // 해당 항목의 display 요소 업데이트
                    var _keywordDisplay = rule_gen.getChild(i, "item_keyword_display");
                    var _deptDisplay = rule_gen.getChild(i, "item_dept_display");
                    var _deleteBtn = rule_gen.getChild(i, "item_delete");

                    if (_keywordDisplay && _deptDisplay) {
                        await _keywordDisplay.setValue(newKeyword);
                        await _deptDisplay.setValue(newDeptName);

                        // 버튼의 userData도 업데이트
                        _editBtn.setUserData("keyword", newKeyword);
                        _editBtn.setUserData("deptName", newDeptName);
                        _deleteBtn.setUserData("keyword", newKeyword);
                        _deleteBtn.setUserData("deptName", newDeptName);
                    }
                    break;
                }
            }

            // 서버에 저장
            scwin.saveAutoAssignRule(newKeyword, newDeptName, ruleId);
        }
    };

    var cancelHandler = function () {
        document.getElementById('modalContainer').remove();
    };

    // 이벤트 리스너 추가
    document.getElementById('modalConfirmBtn').addEventListener('click', confirmHandler);
    document.getElementById('modalCancelBtn').addEventListener('click', cancelHandler);
    document.getElementById('modalBackdrop').addEventListener('click', cancelHandler);

    // 엔터 키 이벤트
    document.getElementById('modalKeyword').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            document.getElementById('modalDepartment').focus();
        }
    });

    document.getElementById('modalDepartment').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            confirmHandler();
        }
    });

    // 키워드 입력란에 포커스
    setTimeout(function () {
        document.getElementById('modalKeyword').focus();
    }, 100);
};

// 자동배정 규칙 저장 - 수정
scwin.saveAutoAssignRule = async function (keyword, deptName, ruleId) {
    // dmp_assignRuleVo에 값 설정
    dmp_assignRuleVo.set("keyword", keyword);
    dmp_assignRuleVo.set("dept", deptName); // 부서명을 dept 필드에 저장

    if (ruleId) {
        dmp_assignRuleVo.set("rule_id", ruleId); // 수정인 경우
    } else {
        dmp_assignRuleVo.set("rule_id", ""); // 신규인 경우
    }

    // submission 호출
    await $c.sbm.execute($p, sbm_saveAutoAssignRule);
};

// 저장 완료 콜백
scwin.sbm_saveAutoAssignRule_submitdone = function (e) {
    var elHeader = e.responseJSON.elHeader;
    var elData = e.responseJSON.elData;

    if (elHeader == null || elHeader == "" || elHeader == "undefined" || elHeader.resSuc == false) {
        $c.win.alert(`에러코드 : ${elHeader.resCode}\n에러메시지 : ${elHeader.resMsg}`);
        return false;
    } else {
        // 성공 메시지만 표시하고 화면은 유지
        $c.win.alert("저장이 완료되었습니다.");

        // 서버에서 반환된 rule_id가 있으면 해당 버튼에 저장
        if (elData && elData.assignRuleVo && elData.assignRuleVo.rule_id) {
            var newRuleId = elData.assignRuleVo.rule_id;

            // 가장 최근에 추가된 항목의 버튼들을 찾아서 rule_id 업데이트
            var childCount = rule_gen.getChildrenCount();
            if (childCount > 0) {
                // 신규 추가된 항목 찾기 (rule_id가 없는 항목)
                for (var i = 0; i < childCount; i++) {
                    var _editBtn = rule_gen.getChild(i, "item_edit");
                    var _deleteBtn = rule_gen.getChild(i, "item_delete");

                    if (_editBtn && !_editBtn.getUserData("ruleId")) {
                        // rule_id가 없는 항목이면 신규 추가된 항목
                        _editBtn.setUserData("ruleId", newRuleId);
                        _deleteBtn.setUserData("ruleId", newRuleId);

                        console.log("신규 항목에 rule_id 설정:", newRuleId);
                        break;
                    }
                }
            }
        }
    }
};

// 삭제 버튼 클릭
scwin.item_delete_onclick = async function (e) {
    // 삭제 확인 모달 스타일로 변경
    var confirmModal = '<div id="deleteModal" style="position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; border-radius:8px; padding:20px; z-index:9999; box-shadow:0 0 20px rgba(0,0,0,0.3); width:300px;">' +
        '<h3 style="margin:0 0 15px 0; font-size:16px;">규칙 삭제</h3>' +
        '<p style="margin:0 0 20px 0; color:#666; font-size:14px;">이 규칙을 삭제하시겠습니까?</p>' +
        '<div style="text-align:right;">' +
        '<button id="deleteCancel" style="padding:6px 15px; margin-right:10px; border:1px solid #ddd; background:white; border-radius:4px; cursor:pointer;">취소</button>' +
        '<button id="deleteConfirm" style="padding:6px 15px; background:#dc3545; color:white; border:none; border-radius:4px; cursor:pointer;">삭제</button>' +
        '</div>' +
        '</div>' +
        '<div id="deleteBackdrop" style="position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:9998;"></div>';

    var modalDiv = document.createElement('div');
    modalDiv.innerHTML = confirmModal;
    document.body.appendChild(modalDiv);

    var self = this;

    document.getElementById('deleteConfirm').addEventListener('click', async function () {
        try {
            var ruleId = self.getUserData("ruleId");
            var keyword = self.getUserData("keyword");
            var deptName = self.getUserData("deptName");

            console.log("삭제할 규칙 정보:", {
                ruleId: ruleId,
                keyword: keyword,
                deptName: deptName
            });

            if (ruleId) {
                // 서버에서 삭제 처리
                await scwin.deleteAutoAssignRule(ruleId);

                // rule_id로 해당 항목 찾아서 제거
                var childCount = rule_gen.getChildrenCount();
                for (var i = 0; i < childCount; i++) {
                    var _editBtn = rule_gen.getChild(i, "item_edit");
                    if (_editBtn && _editBtn.getUserData("ruleId") === ruleId) {
                        rule_gen.removeChild(i);
                        console.log("삭제 완료 - 인덱스:", i, "ID:", ruleId);
                        break;
                    }
                }
            } else {
                // 신규 추가했다가 저장 전에 삭제하는 경우
                var index = self.getGeneratedIndex();
                if (index !== undefined && index !== -1) {
                    rule_gen.removeChild(index);
                    console.log("신규 항목 삭제 완료 - 인덱스:", index);
                }
            }

            // 모달 닫기
            modalDiv.remove();
        } catch (error) {
            console.error("삭제 처리 중 오류:", error);
        }
    });

    document.getElementById('deleteCancel').addEventListener('click', function () {
        modalDiv.remove();
    });

    document.getElementById('deleteBackdrop').addEventListener('click', function () {
        modalDiv.remove();
    });
};

// 자동배정 규칙 삭제 - 수정
scwin.deleteAutoAssignRule = async function (ruleId) {
    dmp_assignRuleVo.set("rule_id", ruleId);
    dmp_assignRuleVo.set("keyword", "");
    dmp_assignRuleVo.set("dept", "");

    await $c.sbm.execute($p, sbm_deleteAutoAssignRule);
};

// 삭제 완료 콜백
scwin.sbm_deleteAutoAssignRule_submitdone = function (e) {
    var elHeader = e.responseJSON.elHeader;

    if (elHeader == null || elHeader == "" || elHeader == "undefined" || elHeader.resSuc == false) {
        $c.win.alert(`에러코드 : ${elHeader.resCode}\n에러메시지 : ${elHeader.resMsg}`);
        return false;
    } else {
        // 성공 메시지만 표시 (화면은 이미 업데이트됨)
        $c.win.alert("삭제가 완료되었습니다.");
    }
};

// 배치 자동 배정 테스트 버튼 클릭
scwin.testBatchAssignment_onclick = async function () {
    if (confirm("미배정 청구들을 일괄로 자동 배정하시겠습니까?")) {
        await $c.sbm.execute($p, sbm_runAutoAssignmentBatch);
    }
};

// 배치 자동 배정 완료 콜백
scwin.sbm_runAutoAssignmentBatch_submitdone = function (e) {
    var elData = e.responseJSON.elData;
    var elHeader = e.responseJSON.elHeader;

    if (elHeader && elHeader.resSuc) {
        if (elData && elData.success) {
            $c.win.alert("배치 배정 완료\n" + elData.message);
        } else {
            $c.win.alert("배치 배정 실패\n" + (elData.message || "알 수 없는 오류"));
        }
    } else {
        $c.win.alert("배치 배정 오류\n" + (elHeader ? elHeader.resMsg : "서버 오류"));
    }
};

// 청구 유형 미리보기 테스트
scwin.testPreviewAssignment_onclick = async function () {
    var claimType = prompt("청구 유형을 입력하세요 (예: 비용, 사고, 방문처치)");
    
    if (claimType && claimType.trim() !== "") {
        // dmp_assignRuleVo에 설정
        dmp_assignRuleVo.set("keyword", claimType.trim());
        dmp_assignRuleVo.set("dept", "");
        dmp_assignRuleVo.set("rule_id", "");
        
        await $c.sbm.execute($p, sbm_previewAssignment);
    }
};

// 청구 유형 미리보기 완료 콜백
scwin.sbm_previewAssignment_submitdone = function (e) {
    var elData = e.responseJSON.elData;
    var elHeader = e.responseJSON.elHeader;

    if (elHeader && elHeader.resSuc && elData) {
        if (elData.success) {
            var message = "배정 미리보기 결과\n\n";
            message += "청구 유형: " + elData.claimType + "\n";
            message += "매칭 키워드: " + elData.matchedKeyword + "\n";
            message += "배정 부서: " + elData.deptName + "\n";
            message += "가능 직원 수: " + elData.employeeCount + "명\n\n";
            
            if (elData.primaryAssignee) {
                message += "우선 배정 대상: " + elData.primaryAssignee.ename + " (" + elData.primaryAssignee.empno + ")";
            }
            
            $c.win.alert(message);
        } else {
            $c.win.alert("미리보기 실패\n" + (elData.message || "알 수 없는 오류"));
        }
    } else {
        $c.win.alert("미리보기 오류\n" + (elHeader ? elHeader.resMsg : "서버 오류"));
    }
};

]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload">
        <!-- 기존 body 내용 유지 -->
        <xf:group class="sub_contents" id="" style="">
            <xf:group class="pgtbox" id="" style="">
                <w2:textbox class="pgt_tit" id="" label="자동배정 설정" style="" tagname=""/>
            </xf:group>
            
            <xf:group class="titbox" id="" style="">
                <w2:textbox class="" id="" label="현재 적용 중인 규칙" style="" tagname="h4"/>
            </xf:group>
            
            <!-- Generator를 위한 별도 컨테이너 영역 -->
            <xf:group id="rule_container" style="width:100%; padding:20px; background-color:#f8f9fa;">
                <w2:generator id="rule_gen" style="width:100%;">
                    <xf:group id="rule_item" style="width:100%; margin-bottom:15px; padding:20px; border:1px solid #e0e0e0; border-radius:8px; background-color:#ffffff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); box-sizing:border-box;">
                        <xf:group style="display:flex; justify-content:space-between; align-items:flex-start; width:100%;">
                            <xf:group style="flex:1; min-width:0; padding-right:10px;">
                                <xf:group style="margin-bottom:10px;">
                                    <w2:textbox label="키워드 : " style="display:inline-block; font-size:13px; color:#666; margin-bottom:5px;"/>
                                    <w2:span id="item_keyword_display" label="" class="rule_keyword"/>
                                </xf:group>
                                <xf:group style="display:flex; align-items:flex-start;">
                                    <w2:span label="•" style="font-size:12px; color:#999; margin-right:5px; margin-top:2px;"/>
                                    <xf:group style="flex:1;">
                                        <w2:span id="item_dept_display" label="" class="rule_dept"/>
                                    </xf:group>
                                </xf:group>
                            </xf:group>
                            <xf:group style="display:flex; align-items:center; flex-shrink:0;">
                                <xf:trigger class="btn_cm" ev:onclick="scwin.item_edit_onclick" id="item_edit" style="width:50px; height:30px; margin-right:5px; font-size:13px;" type="button">
                                    <xf:label><![CDATA[수정]]></xf:label>
                                </xf:trigger>
                                <xf:trigger class="btn_cm btn_delete" ev:onclick="scwin.item_delete_onclick" id="item_delete" style="width:50px; height:30px; font-size:13px;" type="button">
                                    <xf:label><![CDATA[삭제]]></xf:label>
                                </xf:trigger>
                            </xf:group>
                        </xf:group>
                    </xf:group>
                </w2:generator>
            </xf:group>
            
            <!-- 추가 버튼 및 테스트 버튼 -->
            <xf:group id="button_area" style="width:100%; text-align:right; padding:0 20px;">
                <xf:trigger class="btn_cm" ev:onclick="scwin.testPreviewAssignment_onclick" id="test_preview" style="width:120px; height:35px; margin-right:10px; background-color:#17a2b8;" type="button">
                    <xf:label><![CDATA[배정 미리보기]]></xf:label>
                </xf:trigger>
                <xf:trigger class="btn_cm" ev:onclick="scwin.testBatchAssignment_onclick" id="test_batch" style="width:120px; height:35px; margin-right:10px; background-color:#28a745;" type="button">
                    <xf:label><![CDATA[일괄 자동배정]]></xf:label>
                </xf:trigger>
                <xf:trigger class="btn_cm" ev:onclick="scwin.add_rule_onclick" id="add_rule" style="width:100px; height:35px;" type="button">
                    <xf:label><![CDATA[규칙 추가]]></xf:label>
                </xf:trigger>
            </xf:group>
        </xf:group>
    </body>
</html>