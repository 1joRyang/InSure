<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper      
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"      
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	@subject : 대시보드 배치 처리를 담당하는 Sql Mapper
	@description : 대시보드 배치 처리를 담당하는 Sql Mapper
	@author : Inswave
	@since : 2025/07/01
	@modification
	===========================================================
	DATE AUTHOR DESC
	===========================================================
	2025/07/01 Inswave 최초 생성
-->
<mapper namespace="com.demo.proworks.batch">
	<update id="updateMonthlyApprovalRate">
	    /* QueryID : com.demo.proworks.batch.updateMonthlyApprovalRate (월별 승인율 일일 집계) */
	    <![CDATA[
	    INSERT INTO DASHBOARD_MONTHLY_RATE (STAT_YEAR, STAT_MONTH, APPROVAL_RATE, UPDATED_AT)
	    SELECT
	        YEAR(CURDATE()) AS STAT_YEAR,
	        m.month AS STAT_MONTH,
	        /* 분모가 0일 경우를 대비하여 NULLIF 함수 추가 */
	        IFNULL(ROUND((SUM(CASE WHEN c.status = '완료' THEN 1 ELSE 0 END) / NULLIF(COUNT(c.claim_no), 0)) * 100, 1), 0) AS APPROVAL_RATE,
	        NOW() AS UPDATED_AT
	    FROM
	        (SELECT 1 AS month UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
	         SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL
	         SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12) AS m
	    LEFT JOIN
	        CLAIM c ON m.month = MONTH(c.receipt_date)
	               AND YEAR(c.receipt_date) = YEAR(CURDATE())
	               AND c.receipt_date < CURDATE()
	    GROUP BY
	        m.month
	    ON DUPLICATE KEY UPDATE
	        APPROVAL_RATE = VALUES(APPROVAL_RATE),
	        UPDATED_AT = VALUES(UPDATED_AT);
	    ]]>
	</update>
	
	<update id="updateDailyProcessingTime">
	    /* QueryID : com.demo.proworks.batch.updateDailyProcessingTime (일별 처리 시간 통계 - 최종) */
	    <![CDATA[
	    INSERT INTO DASHBOARD_DAILY_TIME (STAT_DATE, AVG_PROCESSING_TIME, OUTLIER_COUNT, UPDATED_AT)
	    WITH YesterdayClaims AS (
	        -- 어제 완료된 모든 건의 처리 시간을 '시간' 단위로 계산
	        SELECT
	            TIMESTAMPDIFF(HOUR, c.receipt_date, CAST(CONCAT(cr.date, ' 23:59:59') AS DATETIME)) AS processing_hours
	        FROM
	            CLAIM_RESULT cr
	        JOIN
	            CLAIM c ON cr.claim_no = c.claim_no
	        WHERE
	            cr.date = CURDATE() - INTERVAL 1 DAY
	            AND c.receipt_date <= CAST(CONCAT(cr.date, ' 23:59:59') AS DATETIME)
	    )
	    SELECT
	        CURDATE() - INTERVAL 1 DAY AS STAT_DATE,
	        -- 3일(72시간) 이내 처리된 건들의 평균 처리 시간
	        IFNULL(AVG(CASE WHEN processing_hours <= 72 THEN processing_hours END), 0) AS AVG_PROCESSING_TIME,
	        -- 3일(72시간)을 초과한 장기 처리 건수
	        COUNT(CASE WHEN processing_hours > 72 THEN 1 END) AS OUTLIER_COUNT,
	        NOW() AS UPDATED_AT
	    FROM
	        YesterdayClaims
	    ON DUPLICATE KEY UPDATE
	        AVG_PROCESSING_TIME = VALUES(AVG_PROCESSING_TIME),
	        OUTLIER_COUNT = VALUES(OUTLIER_COUNT),
	        UPDATED_AT = VALUES(UPDATED_AT);
	    ]]>
	</update>
	
	<update id="updateWeeklyTrend">
	    /* QueryID : com.demo.proworks.batch.updateWeeklyTrend (주간 처리 현황 일일 집계) */
	    <![CDATA[
	    INSERT INTO DASHBOARD_WEEKLY_TREND (STAT_DATE, APPROVAL_COUNT, SIMPLEPAY_COUNT, UPDATED_AT)
	    SELECT
	        y.date AS STAT_DATE,
	        COUNT(CASE WHEN ar.claim_no IS NOT NULL THEN 1 END) AS APPROVAL_COUNT,
	        COUNT(CASE WHEN ar.claim_no IS NULL THEN 1 END) AS SIMPLEPAY_COUNT,
	        NOW() AS UPDATED_AT
	    FROM
	        ( -- 어제 날짜 하나만 생성
	            SELECT CURDATE() - INTERVAL 1 DAY AS date
	        ) AS y
	    LEFT JOIN
	        ( SELECT DATE(cr.date) AS date, cr.claim_no
	          FROM CLAIM_RESULT cr
	          JOIN CLAIM c ON cr.claim_no = c.claim_no
	          WHERE c.status = '완료'
	        ) AS processed_claims ON y.date = processed_claims.date
	    LEFT JOIN
	        APPROVAL_REQ ar ON processed_claims.claim_no = ar.claim_no
	    GROUP BY
	        y.date
	    ON DUPLICATE KEY UPDATE
	        APPROVAL_COUNT = VALUES(APPROVAL_COUNT),
	        SIMPLEPAY_COUNT = VALUES(SIMPLEPAY_COUNT),
	        UPDATED_AT = VALUES(UPDATED_AT);
	    ]]>
	</update>
</mapper>
